<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018春招面试总结</title>
    <url>/2018%E6%98%A5%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>从3月底到4月中旬，经过半个月的面试，终于在4月17号顺利拿到了阿里的 offer，感谢这段时间内面试官、家人和朋友的帮助和鼓励。下面我会总结一些企业关注的点和面试的一些技巧。</p>
</blockquote>
<a id="more"></a>

<h2 id="企业关注的点"><a href="#企业关注的点" class="headerlink" title="企业关注的点"></a>企业关注的点</h2><p>我认为大企业招聘技术实习生或者是应届生时关注有以下几点：</p>
<ul>
<li>你的学历（很重要，我腾讯现场二面估计就是挂在这上面，一上来就问我学校的排名😂）</li>
<li>你的成绩排名</li>
<li>你的项目经验</li>
<li>你的比赛奖项（关注会比较少，除非是获得 acm 那种大型比赛）</li>
<li>对技术是否热情</li>
<li>你的计算机基础</li>
<li>你的价值观</li>
<li>你的性格</li>
<li>你对当前应聘岗位的知识储备</li>
<li>沟通能力和团队协作</li>
<li>是否能够主动去学习新的东西</li>
</ul>
<p>在面试时，这些方面都会有所体现。<br>比如问你一些常规性问题（考察你对当前应聘岗位的知识储备）。<br>问你一些计算机基础问题（考察你的计算机基础）。<br>HR 问你一些关于性格优缺点和一些其他问题（考察你的性格和你的价值观）。<br>问你一些场景题（考察你的项目经验）。<br>问你最近看什么书或者你常逛什么技术社区（考察你是否能够主动去学习新的东西和你对技术是否有热情）等等。</p>
<h2 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h2><p>首先，在面试中，<strong>一定要自信不要紧张</strong>。遇到不会的问题不要慌张，可以将不会的问题转化为自己会的问题。我举个例子，比如面试官问你前端的<code>async</code> 和 <code>await</code> ，那么此时如果你这个不会，那么你可以问一下面试官这个主要是干嘛的，面试官一般都会跟你解释，他告诉你这是异步，那么你就可以往异步的方面靠，这样会让面试官觉得你掌握的还行🙂。</p>
<p>其次，就是<strong>简历的项目经验和技能一定要写好</strong>，因为面试官会一直问项目的实现，难点，和项目产生的背景。然后会问你在简历上的一些相关技能。个人认为如果不太会的技能就不要写上去。比如我写了<strong>了解</strong>前端安全和性能优化，然后很多面试官就问这个。。。一直问。。。还好准备的比较充分，不然就 gg 了🤣</p>
<p>最后，在面试时，<strong>千万不要抱怨你的队友，即便队友很水</strong>。我举个反例，有人在 hr 面试时，hr 问他对队友看法，然后他说队友很水，整个项目都是他在写，然后当天就挂了。你想，企业会要背后说别人闲话的人吗？</p>
<p>最后的最后，面试一定要保持<strong>积极的心态</strong>，就当面试是在自我学习的过程，每次面试都自我反省一下，到底哪些问题回答不好，然后去查缺补漏，这样一定会收获到一个自己满意的 offer 😀</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>hahaha</title>
    <url>/hahaha.html</url>
    <content><![CDATA[<p>hahaha111</p>
]]></content>
  </entry>
  <entry>
    <title>Vimium 常用快捷键</title>
    <url>/Vimium-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>最近用了谷歌插件vimium，发现非常好用，牛逼神器一个😄，下面记一下常用的快捷键</p>
</blockquote>
<a id="more"></a>

<p>打开 <code>vimium help</code> 快捷键 shift+/</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-8ae19353b092aa14.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li><strong>j</strong>: 向下移动 </li>
<li><strong>k</strong>: 向上移动</li>
<li><strong>h</strong>: 左移 </li>
<li><strong>l</strong> : 右移</li>
<li><strong>d</strong>:向下移动一个页面</li>
<li><strong>u</strong>:向上移动一个页面</li>
<li><strong>gg</strong> : 移到页面顶部</li>
<li><strong>G</strong> : 移到页面底部 </li>
<li><strong>x</strong>:关闭当前标签页</li>
<li><strong>X</strong>:恢复关闭的标签页</li>
<li><strong>H</strong>:回到上一个历史页面</li>
<li><strong>L</strong>:回到下一个历史页面</li>
<li><strong>J</strong>：跳到左边标签页</li>
<li><strong>K</strong>：跳到右边标签页</li>
<li><strong>r</strong> : 刷新</li>
<li><strong>gs</strong> : 查看网页源码 </li>
<li><strong>yy</strong> : 复制当前页面的 url 到剪切板</li>
<li><strong>f</strong>: 在当前标签页中打开页面有的链接</li>
<li><strong>F</strong>:在新标签页中页面有的链接</li>
<li><strong>p</strong>:在当前标签页中打开剪切板中的链接</li>
<li><strong>P</strong>:在新的标签页中打开剪切板中的链接</li>
<li><strong>t</strong>:创建新的标签页(也就是 command+t)</li>
<li><strong>T</strong>：搜索打开的标签页</li>
<li><strong>b</strong> : 打开书签 </li>
<li><strong>B</strong> : 在新标签中打开书签</li>
<li><strong>/</strong> :查找(相当于 command+f)</li>
<li><strong>i</strong> : 进入输入模式(这个不知道要干嘛的( ⊙o⊙?))</li>
<li><strong>esc</strong>：退出输入模式</li>
<li><strong>o</strong> : 在当前页面中打开URL，书签和历史记录</li>
<li><strong>O</strong> : 在新标签页面中打开URL，书签和历史记录</li>
<li><strong>gi</strong>：将焦点集中到第一个输入框</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>github博客绑定个性域名</title>
    <url>/github%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E6%80%A7%E5%9F%9F%E5%90%8D.html</url>
    <content><![CDATA[<hr>
<p>首先我们先买个域名,可以在<a href="https://cn.aliyun.com/" target="_blank" rel="noopener">阿里云</a>购买域名，买完之后登陆阿里云的管理控制台,然后点击域名，再点击解析如下</p>
<a id="more"></a>

<p><img src="http://upload-images.jianshu.io/upload_images/5308475-4953432e1dae183e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>接下来点击添加解析，并输入以下信息（记录值不一样，第一个的记录值填你的github访问地址,如<code>shenzekun.github.io</code>,第二个填的是你的网站的ip地址，比如我原来的网站是<code>shenzekun.github.io</code>,那么就查找<code>shenzekun.github.io</code>的ip地址，网站的ip地址可以在这查<a href="http://ip.chinaz.com/" target="_blank" rel="noopener">ip地址</a>）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-8b27bab6a8c389d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后向你的 Github Pages 仓库添加一个CNAME(一定要<em>大写</em>)文件，在CNAME里面添加你的域名信息（<code>不加http://</code>），如<code>shenzekun.cn</code>,并上传到你的GitHub中</p>
<p>填完之后登陆你博客的github，点击setting<br><img src="http://upload-images.jianshu.io/upload_images/5308475-d73094344c7c7f6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>在这填写你的域名，点击保存即可</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-86c99fdf87c8fef8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>接下来就是等了，我的博客大概半个小时就可以看到了。😝</p>
<hr>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo，从此开始...</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<blockquote>
<p><strong>本版本仅适用于Win环境</strong><br>本文关键字： <strong>GoodHexo</strong>，<strong>Hexo绿色版</strong>，<strong>Hexo便携版</strong>，<strong>Hexo配置</strong>，<strong>Hexo</strong>，<strong>U盘携带</strong><br>该文档会根据实际使用情况不定期更新，便携包内可能不同步，最新GoodHexo帮助文档见<a href="http://sobaigu.com/start-with-good-hexo.html" target="_blank" rel="noopener"><strong>官方网站</strong></a></p>
</blockquote>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。</p>
<p>但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。</p>
<p>所以呢，我们整合了一个 Hexo 便携版，来简化本地环境的部署。</p>
<p><img src="/images/GoodHexo.png" alt=""></p>
<h1 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h1><p>那么所谓的便携版到底是什么？便携版就是将 Hexo 本地环境所需要的各种依赖环境的整合到一起，做成不需要安装的版本。</p>
<p>本便携版所包含的软件如下：</p>
<ul>
<li>Git: 2.7.4</li>
<li>Nodejs: 6.10.1</li>
<li>Npm: 4.4.1</li>
<li>Hexo: 3.2.2</li>
</ul>
<p>为了便携的需要，不能配置固定的环境变量，所以除此之外还有相应的批处理脚本，下文将详细介绍。</p>
<h1 id="GoodHexo下载地址"><a href="#GoodHexo下载地址" class="headerlink" title="GoodHexo下载地址"></a>GoodHexo下载地址</h1><p><em>每列提取码与链接对应,如为空表示直接点进去链接不需要提取码,无链接则表示对应软件只需要提取码即可</em></p>
<table>
<thead>
<tr>
<th>项目</th>
<th>地址一</th>
<th>地址二</th>
<th>地址三</th>
</tr>
</thead>
<tbody><tr>
<td>链接</td>
<td><a href="https://pan.baidu.com/s/1hsrKV0w" target="_blank" rel="noopener">百度网盘</a></td>
<td><a href="https://www.pipipan.com/dir/535543-25645713-b7a72b/" target="_blank" rel="noopener">备用网盘</a></td>
<td>BitTorrent Sync</td>
</tr>
<tr>
<td>提取码</td>
<td>wp7c</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>如果百度网盘慢，就换备用网盘下，文件大小46.8M<br>或者使用这个：<a href="http://sobaigu.com/software-baidu-pan-downloader.html" target="_blank" rel="noopener">百度网盘高速下载工具</a></p>
</blockquote>
<h1 id="从零开始，一分钟使用-GoodHexo-写作环境"><a href="#从零开始，一分钟使用-GoodHexo-写作环境" class="headerlink" title="从零开始，一分钟使用 GoodHexo 写作环境"></a>从零开始，一分钟使用 GoodHexo 写作环境</h1><p>说了这么多，我们这就开始教你如何在1分钟内，从零开始使用 GoodHexo 写作环境！</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>您订制的GoodHexo包已经包含了Hexo博客所需的所有依赖，其目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOODHEXO</span><br><span class="line">|   1.新建文章.bat  #要新建文章运行此批处理</span><br><span class="line">|   2.本地测试.bat  #写完文章可以启动本地服务端测试预览效果</span><br><span class="line">|   3.渲染并部署.bat #确定文章写完了，那么就运行此批处理发布</span><br><span class="line">|   README.md #本便携包说明文档</span><br><span class="line">|   启动命令行.bat #给有经验的人用，直达bash界面</span><br><span class="line">|   清理旧文件后部署.bat  #部署也没报错，但博客就是没更新或者其他异常，那么用这个来部署试试</span><br><span class="line">|   </span><br><span class="line">+---hexo    #hexo程序工作目录</span><br><span class="line">|   |   .gitignore</span><br><span class="line">|   |   db.json</span><br><span class="line">|   |   package.json</span><br><span class="line">|   |   _config.yml  #hexo的主配置文件，定义标题，作者，导航菜单等</span><br><span class="line">|   |   </span><br><span class="line">|   +---node_modules  #hexo的依赖环境，不要动</span><br><span class="line">|   +---scaffolds  #文章模板</span><br><span class="line">|   +---source  #网站根目录</span><br><span class="line">|   |   \---_posts  #你所有的文章都存在这个目录底下，通过批处理新建文章会自动建到这个目录下</span><br><span class="line">|   |   |   hello-world.md  #示例文章源文件，该MarkDown文件会被hexo渲染成HTML页发布</span><br><span class="line">|   |   </span><br><span class="line">|   +---themes  #主题存放目录</span><br><span class="line">|   |   \---landscape #默认主题</span><br><span class="line">|   |   </span><br><span class="line">|       </span><br><span class="line">\---support #便携程序包，包含nodejs和Git，不要动</span><br></pre></td></tr></table></figure>

<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="详细个性化设置"><a href="#详细个性化设置" class="headerlink" title="详细个性化设置"></a>详细个性化设置</h3><p>拿到这个包，一些基础配置和基本的主题设置等院长都已经给你做好了，只需要自行对博客网站进行个性化详细设置即可。</p>
<p>个性化设置主要有两个地方：</p>
<ol>
<li>Hexo目录下的<code>_config.yml</code></li>
<li>主题目录下的<code>_config.yml</code></li>
</ol>
<p>依次打开就能看个大概了，根据自己的需要及主题帮助完成自己要的个性化设置。更深入的个性化基本上需要在主题上做文章，请自行查看主题帮助，或者研究主题源代码即可完成。</p>
<h3 id="写一篇自己的文章"><a href="#写一篇自己的文章" class="headerlink" title="写一篇自己的文章"></a>写一篇自己的文章</h3><p>设置好后，就可以动手写自己的文章了。</p>
<h4 id="step1-新建文章"><a href="#step1-新建文章" class="headerlink" title="step1.新建文章"></a>step1.新建文章</h4><p>运行<code>1.新建文章.bat</code>，按提示填写文章名称，建议不要使用中文。</p>
<p>回车确认后会在<code>hexo</code>目录下的对应目录新建个<code>.md</code>文件，文件名以刚才输入的文章名称命名，如<code>hexo\source\_posts\2017-09-start-with-good-hexo.md</code></p>
<h4 id="step2-编辑文章MarkDown文件"><a href="#step2-编辑文章MarkDown文件" class="headerlink" title="step2. 编辑文章MarkDown文件"></a>step2. 编辑文章MarkDown文件</h4><p>使用任意文本编辑器打开你刚新建的文章MarkDown源文件，写你想写的内容即可，推荐编辑器首选用Atom或者Typora，<a href="http://sobaigu.com/software-markdown-editor.html" target="_blank" rel="noopener">MarkDown编辑器推荐这篇文章</a>你可以阅读下。</p>
<p>如果不依赖MarkDown编辑器，那么你需要掌握基本的MarkDown语法，然后就可以用任意文本编辑器【当然，Windows系统自带的记事本还是不推荐用】，按MarkDown语法写文档了。MarkDown语法可以参考<a href="http://xianbai.me/learn-md/article/about/readme.html" target="_blank" rel="noopener">这个教程</a>。</p>
<p><strong>需要额外注意的是</strong>：Hexo对MarkDown文档头有规范，就是在文档开始两个 <code>---</code> 中间的那部分，官方称之为 <code>Front-matter</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#39;Hexo，从此开始...&#39;  #文章标题，新建文章的时候填的会自动写到这里</span><br><span class="line">date: 2018-1-12 17:19:27  #文章创建时间</span><br><span class="line">categories:  #分类，可以直接跟在这后面，也可以如下一行这样换行后写分类</span><br><span class="line">- 搞软件  #这是个分类名称</span><br><span class="line">tags:  #标签</span><br><span class="line">- 晒酷软  #这是个标签</span><br><span class="line">toc: true  #是否显示目录，false不显示，true显示，需要主题支持</span><br><span class="line">top:  #填数字，值越大的文章在首页就越置顶，本包已集成</span><br><span class="line">comments: true  #是否允许评论，需要主题支持</span><br><span class="line">keywords: &#39;&#39;    #文章关键词，需要主题支持</span><br><span class="line">description:  &#39;文章摘要，可以是一大段，用英文引号括起来&#39;  #不填则根据主题设计截取对应字数</span><br><span class="line">---</span><br><span class="line">上面部分是规定的头部信息，这行开始就是文章内容了...</span><br></pre></td></tr></table></figure>
<p>以上参数除了<code>title:</code>都不是必须的，请根据自己的需求填写，如果涉及特殊字符或者空格等，请使用英文的单引号 <code>&#39;&#39;</code> 将你的内容括起来，就如上面的示例一样。</p>
<p>更多 <code>Front-matter</code> 参数详见官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter.html</a></p>
<p>文章参数设置完后，就可以在 <code>---</code> 下一行写自己想写的任何内容了，以下都属于你文章的内容。</p>
<h4 id="step3-渲染并发布"><a href="#step3-渲染并发布" class="headerlink" title="step3.渲染并发布"></a>step3.渲染并发布</h4><p>文章写好保存，那就运行<code>3.渲染并部署.bat</code>，该批处理会将你的MarkDown源文件套用主题模板渲染成HTML静态页，并把静态页部署到网站空间，最后提示 <code>deploy done：git</code> 就表示已部署完成，要不了几秒，访问你的网站url就能看到效果了。</p>
<p>以后再写新文章，重复以上步骤即可。</p>
<p>使用过程中可能会遇到一些问题，请参考我整理的：<a href="http://sobaigu.com/goodhexo-faq.html" target="_blank" rel="noopener">GoodHexo使用常见问题及解决办法</a></p>
<h1 id="进阶教程"><a href="#进阶教程" class="headerlink" title="进阶教程"></a>进阶教程</h1><p>如果你喜欢折腾，Hexo进阶部署使用可以参考<a href="http://sobaigu.com/Hexo-git-to-vps.html" target="_blank" rel="noopener">Hexo博客Git-VPS部署完整记录</a>。</p>
<p>使用过程中如需帮助，欢迎关注微信公众号，淘宝店，我的博客或者加入我们的交流群。</p>
<div style="float:left;border:solid 1px 000;margin:2px;"><img src="http://sobaigu.com/images/QR-atm.png"  width="200" height="260" ></div>

<div style="float:left;border:solid 1px 000;margin:2px;"><img src="http://sobaigu.com/images/QR-Taobao.png" width="200" height="260" ></div>

<div style="float:left;border:solid 1px 000;margin:2px;"><img src="http://sobaigu.com/images/QR-260489333.png" width="200" height="260" ></div>
<div style="float:none;clear:both;"></div>

<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><blockquote>
<ul>
<li>本文所有权归 <a href="http://sobaigu.com" target="_blank" rel="noopener">搜百谷</a> 所有；</li>
<li>本便携版由 <a href="http://sobaigu.com" target="_blank" rel="noopener">凹凸曼达人</a> 维护并提供技术支持；</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GoodHexo</tag>
        <tag>博客建站</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题如何添加动态背景</title>
    <url>/hexo%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>注意</strong>：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）</p>
</blockquote>
<p>其实挺简单的︿(￣︶￣)︿</p>
<h3 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改<code>_layout.swig</code></h3><p>打开  <code>next/layout/_layout.swig</code><br>在 <code>&lt; /body&gt;</code>之前添加代码(注意不要放在&lt; /head&gt;的后面)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<a id="more"></a>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开 <code>/next/_config.yml</code>,在里面添加如下代码：(可以放在最后面)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --------------------------------------------------------------</span><br><span class="line"># background settings</span><br><span class="line"># --------------------------------------------------------------</span><br><span class="line"># add canvas-nest effect</span><br><span class="line"># see detail from https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure>
<p>到此就结束了，运行 <code>hexo clean</code>，然后运行 <code>hexo g</code>,然后运行 <code>hexo s</code>，最后打开浏览器在浏览器的地址栏输入 <code>localhost:4000</code> 就能看到效果了\（￣︶￣）/</p>
<hr>
<h3 id="如果你感觉默认的线条太多的话"><a href="#如果你感觉默认的线条太多的话" class="headerlink" title="如果你感觉默认的线条太多的话"></a>如果你感觉默认的线条太多的话</h3><h4 id="可以这么设置-gt"><a href="#可以这么设置-gt" class="headerlink" title="可以这么设置====&gt;"></a>可以这么设置====&gt;</h4><p>在上一步修改  <code>_layout.swig</code>中，把刚才的这些代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">color=<span class="string">"0,0,255"</span> opacity=<span class="string">'0.7'</span> zIndex=<span class="string">"-2"</span> count=<span class="string">"99"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h3><ul>
<li><code>color</code> ：线条颜色, 默认: <code>&#39;0,0,0&#39;</code>；三个数字分别为(R,G,B)</li>
<li><code>opacity</code>: 线条透明度（0~1）, 默认: <code>0.5</code></li>
<li><code>count</code>: 线条的总数量, 默认: <code>150</code></li>
<li><code>zIndex:</code> 背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的next主题个性化教程:打造炫酷网站</title>
    <url>/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果</p>
</blockquote>
<a id="more"></a>

<p>主要有以下33种：</p>
<ul>
<li>在右上角或者左上角实现fork me on github</li>
<li>添加RSS</li>
<li>添加动态背景</li>
<li>实现点击出现桃心效果</li>
<li>修改文章内链接文本样式</li>
<li>修改文章底部的那个带#号的标签</li>
<li>在每篇文章末尾统一添加“本文结束”标记</li>
<li>修改作者头像并旋转</li>
<li>博文压缩</li>
<li>修改``代码块自定义样式</li>
<li>侧边栏社交小图标设置</li>
<li>主页文章添加阴影效果</li>
<li>在网站底部加上访问量</li>
<li>添加热度</li>
<li>网站底部字数统计</li>
<li>添加 README.md 文件</li>
<li>设置网站的图标Favicon</li>
<li>实现统计功能</li>
<li>添加顶部加载条</li>
<li>在文章底部增加版权信息</li>
<li>添加网易云跟帖(跟帖关闭，已失效，改为来必力)</li>
<li>隐藏网页底部powered By Hexo / 强力驱动</li>
<li>修改网页底部的桃心</li>
<li>文章加密访问</li>
<li>添加jiathis分享</li>
<li>博文置顶</li>
<li>修改字体大小</li>
<li>修改打赏字体不闪动</li>
<li>侧边栏推荐阅读</li>
<li>自定义鼠标样式</li>
<li>为博客加上萌萌的宠物</li>
<li>DaoVoice 在线联系</li>
<li>点击爆炸效果</li>
</ul>
<hr>
<h1 id="1-在右上角或者左上角实现fork-me-on-github"><a href="#1-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="1. 在右上角或者左上角实现fork me on github"></a>1. 在右上角或者左上角实现fork me on github</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-71cf61436fe2ef27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-733457ecd3fbe289.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> <strong>具体实现方法</strong></p>
<p>点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a>或者<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-96b22eacbe43838c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中(放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的github地址<br><img src="http://upload-images.jianshu.io/upload_images/5308475-d2601ad456db064b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h1 id="2-添加RSS"><a href="#2-添加RSS" class="headerlink" title="2.添加RSS"></a>2.添加RSS</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-a54daae937107550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>切换到你的blog（我是取名blog，具体的看你们的取名是什么）的路径，例如我是在<code>/Users/chenzekun/Code/Hexo/blog</code>这个路径上，也就是在你的根目录下<br><img src="http://upload-images.jianshu.io/upload_images/5308475-e8356e1ca05f23a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后安装 Hexo 插件：(这个插件会放在<code>node_modules</code>这个文件夹里)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure>

<p>接下来打开画红线的文件，如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-55f034e749aa8e6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在里面的末尾添加：(<strong>请注意</strong>在冒号后面要加一个空格，不然会发生错误！)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure>
<p>然后打开next主题文件夹里面的<code>_config.yml</code>,在里面配置为如下样子：(就是在<code>rss:</code>的后面加上<code>/atom.xml</code>,<strong>注意</strong>在冒号后面要加一个空格)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&#39;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: &#x2F;atom.xml</span><br></pre></td></tr></table></figure>
<p>配置完之后运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>重新生成一次，你会在<code>./public</code> 文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p>
<hr>
<h1 id="3-添加动态背景"><a href="#3-添加动态背景" class="headerlink" title="3. 添加动态背景"></a>3. 添加动态背景</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-ef603580be708882.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>这个我之前有一篇文章有讲过了，详情点击<a href="http://shenzekun.cn/hexo%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html" target="_blank" rel="noopener">我的博客</a></p>
<hr>
<h1 id="4-实现点击出现桃心效果"><a href="#4-实现点击出现桃心效果" class="headerlink" title="4. 实现点击出现桃心效果"></a>4. 实现点击出现桃心效果</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-78e64c0a80bb559e.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p> <strong>具体实现方法</strong></p>
<p>在网址输入如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;7u2ss1.com1.z0.glb.clouddn.com&#x2F;love.js</span><br></pre></td></tr></table></figure>
<p>然后将里面的代码copy一下，新建<code>love.js</code>文件并且将代码复制进去，然后保存。将<code>love.js</code>文件放到路径<code>/themes/next/source/js/src</code>里面，然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="5-修改文章内链接文本样式"><a href="#5-修改文章内链接文本样式" class="headerlink" title="5. 修改文章内链接文本样式"></a>5. 修改文章内链接文本样式</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-8cc4fc18c399af7e.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p> <strong>具体实现方法</strong></p>
<p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下css样式，：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中选择<code>.post-body</code> 是为了不影响标题，选择 <code>p</code> 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>
<hr>
<h1 id="6-修改文章底部的那个带-号的标签"><a href="#6-修改文章底部的那个带-号的标签" class="headerlink" title="6. 修改文章底部的那个带#号的标签"></a>6. 修改文章底部的那个带#号的标签</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-9f1817d2d7627f7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<hr>
<h1 id="7-在每篇文章末尾统一添加“本文结束”标记"><a href="#7-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="7. 在每篇文章末尾统一添加“本文结束”标记"></a>7. 在每篇文章末尾统一添加“本文结束”标记</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-90be73acbc5f8a7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;感谢您的阅读-------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加如下画红色部分代码（post-footer之前两个DIV）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-865c7f94f89b907e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#39;passage-end-tag.swig&#39; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>
<p>完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。</p>
<hr>
<h1 id="8-修改作者头像并旋转"><a href="#8-修改作者头像并旋转" class="headerlink" title="8. 修改作者头像并旋转"></a>8. 修改作者头像并旋转</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-e035ce8ac8ea0b5b.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 头像圆形 *&#x2F;</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*&#x2F;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  &#x2F;* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*&#x2F;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* Z 轴旋转动画 *&#x2F;</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="9-博文压缩"><a href="#9-博文压缩" class="headerlink" title="9. 博文压缩"></a>9. 博文压缩</h1><p>在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>

<p>在如下图所示，新建 <code>gulpfile.js</code> ，并填入以下内容：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-bb959c3fb610e69c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class="line">var minifycss &#x3D; require(&#39;gulp-minify-css&#39;);</span><br><span class="line">var uglify &#x3D; require(&#39;gulp-uglify&#39;);</span><br><span class="line">var htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;);</span><br><span class="line">var htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public 目录 css</span><br><span class="line">gulp.task(&#39;minify-css&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.css&#39;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public 目录 html</span><br><span class="line">gulp.task(&#39;minify-html&#39;, function() &#123;</span><br><span class="line">  return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: true,</span><br><span class="line">         minifyJS: true,</span><br><span class="line">         minifyCSS: true,</span><br><span class="line">         minifyURLs: true,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public&#x2F;js 目录 js</span><br><span class="line">gulp.task(&#39;minify-js&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&#39;default&#39;, [</span><br><span class="line">    &#39;minify-html&#39;,&#39;minify-css&#39;,&#39;minify-js&#39;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p>
<hr>
<h1 id="10-修改-代码块自定义样式"><a href="#10-修改-代码块自定义样式" class="headerlink" title="10. 修改``代码块自定义样式"></a>10. 修改``代码块自定义样式</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-e83a6ac00d4d1db3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：(颜色可以自己定义)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="11-侧边栏社交小图标设置"><a href="#11-侧边栏社交小图标设置" class="headerlink" title="11. 侧边栏社交小图标设置"></a>11. 侧边栏社交小图标设置</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-20e8bba1ad3b343f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>打开主题配置文件（<code>_config.yml</code>），搜索<code>social_icons:</code>,在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-21e22b05edc57b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h1 id="12-主页文章添加阴影效果"><a href="#12-主页文章添加阴影效果" class="headerlink" title="12. 主页文章添加阴影效果"></a>12. 主页文章添加阴影效果</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-21046c442900bf3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="13-在网站底部加上访问量"><a href="#13-在网站底部加上访问量" class="headerlink" title="13. 在网站底部加上访问量"></a>13. 在网站底部加上访问量</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-3124557da2b9c75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong><br>打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在copyright前加上画红线这句话：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-ef8a4643f33fbaa1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>然后再合适的位置添加显示统计的代码，如图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-bd6fb55b6847d13a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;powered-by&quot;&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;fa fa-user-md&quot;&gt;&lt;&#x2F;i&gt;&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访客数:&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>在这里有两中不同计算方式的统计代码：</p>
<ol>
<li><strong>pv</strong>的方式，单个用户连续点击n篇文章，记录n次访问量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">    本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>uv</strong>的方式，单个用户连续点击n篇文章，只记录1次访客数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;次</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>
<p>添加之后再执行<code>hexo d -g</code>，然后再刷新页面就能看到效果</p>
<hr>
<h1 id="14-添加热度"><a href="#14-添加热度" class="headerlink" title="14. 添加热度"></a>14. 添加热度</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-9bc8a6587cd1a575.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p><strong>next</strong>主题集成<strong>leanCloud</strong>，打开<code>/themes/next/layout/_macro/post.swig</code>,在画红线的区域添加<code>℃</code>：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-f5dbda6888a79dd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后打开，<code>/themes/next/languages/zh-Hans.yml</code>,将画红框的改为热度就可以了<br><img src="http://upload-images.jianshu.io/upload_images/5308475-bd0e1ac5456a2f0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h1 id="15-网站底部字数统计"><a href="#15-网站底部字数统计" class="headerlink" title="15. 网站底部字数统计"></a>15. 网站底部字数统计</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-f26f21e2f2b34e18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体方法实现</strong><br>切换到根目录下，然后运行如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>

<p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;powered-by&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="16-添加-README-md-文件"><a href="#16-添加-README-md-文件" class="headerlink" title="16. 添加 README.md 文件"></a>16. 添加 README.md 文件</h1><p>每个项目下一般都有一个 <code>README.md</code> 文件，但是使用 hexo 部署到仓库后，项目下是没有 <code>README.md</code> 文件的。</p>
<p>在 Hexo 目录下的 <code>source</code> 根目录下添加一个 <code>README.md</code> 文件，修改站点配置文件 _<code>config.yml</code>，将 <code>skip_render</code> 参数的值设置为 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure>
<p>保存退出即可。再次使用 <code>hexo d</code> 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p>
<hr>
<h1 id="17-设置网站的图标Favicon"><a href="#17-设置网站的图标Favicon" class="headerlink" title="17. 设置网站的图标Favicon"></a>17. 设置网站的图标Favicon</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-da012d2c0586a1e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体方法实现</strong></p>
<p>在<a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>中找一张（32*32）的<code>ico</code>图标,或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在<code>/themes/next/source/images</code>里，并且修改主题配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Put your favicon.ico into &#96;hexo-site&#x2F;source&#x2F;&#96; directory.</span><br><span class="line">favicon: &#x2F;favicon.ico</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="18-实现统计功能"><a href="#18-实现统计功能" class="headerlink" title="18. 实现统计功能"></a>18. 实现统计功能</h1><p><strong>实现效果图</strong><br><img src="http://upload-images.jianshu.io/upload_images/5308475-11cf11fe888748a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>在根目录下安装 <code>hexo-wordcount</code>,运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>
<p>然后在主题的配置文件中，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;willin&#x2F;hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="19-添加顶部加载条"><a href="#19-添加顶部加载条" class="headerlink" title="19. 添加顶部加载条"></a>19. 添加顶部加载条</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-2f5051d9f0352b90.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>打开<code>/themes/next/layout/_partials/head.swig</code>文件，添加红框上的代码<br><img src="http://upload-images.jianshu.io/upload_images/5308475-72a578a8e3eee672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;pace.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;link href&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;themes&#x2F;pink&#x2F;pace-theme-flash.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>但是，默认的是粉色的，要改变颜色可以在<code>/themes/next/layout/_partials/head.swig</code>文件中添加如下代码（接在刚才link的后面）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .pace .pace-progress &#123;</span><br><span class="line">        background: #1E92FB; &#x2F;*进度条颜色*&#x2F;</span><br><span class="line">        height: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    .pace .pace-progress-inner &#123;</span><br><span class="line">         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; &#x2F;*阴影颜色*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    .pace .pace-activity &#123;</span><br><span class="line">        border-top-color: #1E92FB;    &#x2F;*上边框颜色*&#x2F;</span><br><span class="line">        border-left-color: #1E92FB;    &#x2F;*左边框颜色*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>目前，博主的增加顶部加载条的pull request 已被Merge😀===&gt;<a href="https://github.com/iissnan/hexo-theme-next/pull/1689" target="_blank" rel="noopener">详情</a><br>现在升级最新版的next主题，升级后只需修改主题配置文件(_config.yml)将<code>pace: false</code>改为<code>pace: true</code>就行了，你还可以换不同样式的加载条，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-6d44a78e76dbf950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</blockquote>
<hr>
<h1 id="20-在文章底部增加版权信息"><a href="#20-在文章底部增加版权信息" class="headerlink" title="20. 在文章底部增加版权信息"></a>20. 在文章底部增加版权信息</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-a264542f53665849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在目录 <code>next/layout/_macro/下</code>添加 <code>my-copyright.swig</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;clipboard.js&#x2F;1.5.10&#x2F;clipboard.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;2.0.0&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;sweetalert&#x2F;dist&#x2F;sweetalert.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#x2F;&quot; title&#x3D;&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;&#x2F;span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;&#x2F;span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;copy-path&quot;  title&#x3D;&quot;点击复制文章链接&quot;&gt;&lt;i class&#x3D;&quot;fa fa-clipboard&quot; data-clipboard-text&#x3D;&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label&#x3D;&quot;复制成功！&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;&#x2F;span&gt;&lt;i class&#x3D;&quot;fa fa-creative-commons&quot;&gt;&lt;&#x2F;i&gt; &lt;a rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-nd&#x2F;4.0&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;&#x2F;a&gt; 转载请保留原文链接及作者。&lt;&#x2F;p&gt;  </span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard &#x3D; new Clipboard(&#39;.fa-clipboard&#39;);</span><br><span class="line">    $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">      clipboard.on(&#39;success&#39;, function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &#39;复制成功&#39;,</span><br><span class="line">          icon: &quot;success&quot;, </span><br><span class="line">          showConfirmButton: true</span><br><span class="line">          &#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在目录<code>next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a3d2a3</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>next/layout/_macro/post.swig</code>，在代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &#39;wechat-subscriber.swig&#39; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>之前添加增加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &#39;my-copyright.swig&#39; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-769a382b6c9ada3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure>
<p>保存重新生成即可。<br>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p>
<blockquote>
<p><strong>小技巧</strong>：如果你觉得每次都要输入<code>copyright: true</code>很麻烦的话,那么在<code>/scaffolds/post.md</code>文件中添加：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-51f087ce1f1903a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这样每次<code>hexo new &quot;你的内容&quot;</code>之后，生成的md文件会自动把<code>copyright:</code>加到里面去<br>(<strong>注意</strong>：如果解析出来之后，你的原始链接有问题：如：<code>http://yoursite.com/前端小项目：使用canvas绘画哆啦A梦.html</code>,那么在根目录下<code>_config.yml</code>中写成类似这样：）<br><img src="http://upload-images.jianshu.io/upload_images/5308475-980129b36907d103.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">就行了。</p>
</blockquote>
<hr>
<h1 id="21-添加网易云跟帖-跟帖关闭，已失效，改为来必力"><a href="#21-添加网易云跟帖-跟帖关闭，已失效，改为来必力" class="headerlink" title="21. 添加网易云跟帖(跟帖关闭，已失效，改为来必力)"></a>21. 添加网易云跟帖(跟帖关闭，已失效，改为来必力)</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-86b212c1221292ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>具体方法实现</strong><br>有两种实现方法：<br>①更新next主题，因为最新版本的主题已经支持这种评论。直接在主题配置文件<code>_config.yml</code> 文件中添加如下配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gentie_productKey: #your-gentie-product-key</span><br></pre></td></tr></table></figure>
<p>②如果你不想更新的话，那么按下面步骤进行：<br>首先，还是在主题配置文件<code>_config.yml</code> 文件中添加如下配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gentie_productKey: #your-gentie-product-key</span><br></pre></td></tr></table></figure>
<p>你的<code>productKey</code>就是下面画红线部分<br><img src="http://upload-images.jianshu.io/upload_images/5308475-2d1eeef55db50cfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后在在<code>layout/_scripts/third-party/comments/</code> 目录中添加 <code>gentie.swig</code>，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id %&#125;</span><br><span class="line">  &#123;% if theme.gentie_productKey %&#125;</span><br><span class="line">    &#123;% set gentie_productKey &#x3D; theme.gentie_productKey %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var cloudTieConfig &#x3D; &#123;</span><br><span class="line">        url: document.location.href, </span><br><span class="line">        sourceId: &quot;&quot;,</span><br><span class="line">        productKey: &quot;&#123;&#123;gentie_productKey&#125;&#125;&quot;,</span><br><span class="line">        target: &quot;cloud-tie-wrapper&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;img1.ws.126.net&#x2F;f2e&#x2F;tie&#x2F;yun&#x2F;sdk&#x2F;loader.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &#39;.&#x2F;comments&#x2F;gentie.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加网易云跟帖插件引用的判断逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gentie_productKey %&#125;</span><br><span class="line">      &lt;div id&#x3D;&quot;cloud-tie-wrapper&quot; class&#x3D;&quot;cloud-tie-wrapper&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>具体位置如下：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-c9199439d2396989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>可能你<code>hexo s</code>时可能看不到，直接<code>hexo d</code>就可以看到了</p>
<hr>
<blockquote>
<p>近日，我朋友发来消息，说网易云跟帖要关了，我网上查了一下，果然如此</p>
</blockquote>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhdq9vii8pj310k0iqjse.jpg" alt=""></p>
<blockquote>
<p>😭都是泪,上次用了多说，结果多说关了，接着是网易云跟帖😷，这次直接用国外的来必力，应该不会这么容易关吧😏</p>
</blockquote>
<p>方法其实还是跟上面差不多的</p>
<p>首先在 <code>_config.yml</code> 文件中添加如下配置：(<strong>注意！如果主题是最新版的，直接写你的liver_uid就行了</strong>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https:&#x2F;&#x2F;livere.com&#x2F;insight&#x2F;myCode (General web site)</span><br><span class="line">livere_uid: your uid</span><br></pre></td></tr></table></figure>
<p>其中，<code>livere_uid</code>就是画红线的部分<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhdqgyeu2fj30ms02yglr.jpg" alt=""></p>
<p>然后在 <code>layout/_scripts/third-party/comments/</code> 目录中添加 livere.swig，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125;</span><br><span class="line">  &#123;% if theme.livere_uid %&#125;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">      (function(d, s) &#123;</span><br><span class="line">        var j, e &#x3D; d.getElementsByTagName(s)[0];</span><br><span class="line">        if (typeof LivereTower &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123; return; &#125;</span><br><span class="line">        j &#x3D; d.createElement(s);</span><br><span class="line">        j.src &#x3D; &#39;https:&#x2F;&#x2F;cdn-city.livere.com&#x2F;js&#x2F;embed.dist.js&#39;;</span><br><span class="line">        j.async &#x3D; true;</span><br><span class="line">        e.parentNode.insertBefore(j, e);</span><br><span class="line">      &#125;)(document, &#39;script&#39;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 <code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &#39;.&#x2F;comments&#x2F;livere.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加 LiveRe 插件是否引用的判断逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.livere_uid %&#125;</span><br><span class="line">      &lt;div id&#x3D;&quot;lv-container&quot; data-id&#x3D;&quot;city&quot; data-uid&#x3D;&quot;&#123;&#123; theme.livere_uid &#125;&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>完</p>
<hr>
<h1 id="22-隐藏网页底部powered-By-Hexo-强力驱动"><a href="#22-隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="22. 隐藏网页底部powered By Hexo / 强力驱动"></a>22. 隐藏网页底部powered By Hexo / 强力驱动</h1><p>打开<code>themes/next/layout/_partials/footer.swig</code>,使用”<!-- -->”隐藏之间的代码即可，或者直接删除。位置如图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-8e8340c7a0489bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h1 id="23-修改网页底部的桃心"><a href="#23-修改网页底部的桃心" class="headerlink" title="23. 修改网页底部的桃心"></a>23. 修改网页底部的桃心</h1><p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-f6355823aef7f723.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">)，然后还是在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p>
<hr>
<h1 id="24-文章加密访问"><a href="#24-文章加密访问" class="headerlink" title="24. 文章加密访问"></a>24. 文章加密访问</h1><p><strong>实现效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-0c7e5e61b78dc937.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在以下位置插入这样一段代码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-446793cd6d740b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        if (&#39;&#123;&#123; page.password &#125;&#125;&#39;) &#123;</span><br><span class="line">            if (prompt(&#39;请输入文章密码&#39;) !&#x3D;&#x3D; &#39;&#123;&#123; page.password &#125;&#125;&#39;) &#123;</span><br><span class="line">                alert(&#39;密码错误！&#39;);</span><br><span class="line">                if (history.length &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                    location.replace(&quot;http:&#x2F;&#x2F;xxxxxxx.xxx&quot;); &#x2F;&#x2F; 这里替换成你的首页</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    history.back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>然后在文章上写成类似这样：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-e6c726a0152cb8ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h1 id="25-添加jiathis分享"><a href="#25-添加jiathis分享" class="headerlink" title="25. 添加jiathis分享"></a>25. 添加jiathis分享</h1><blockquote>
<p><strong>注意：</strong>JiaThis 不支持 https</p>
</blockquote>
<p>在<strong>主题配置文件</strong>中，JiaThis为true，就行了，如下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-f381bc9e7c73b1e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>默认是这样子的：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-a88228b9ea43ab2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>如果你想自定义话，打开<code>themes/next/layout/_partials/share/jiathis.swig</code>修改画红线部分就可以了<br><img src="http://upload-images.jianshu.io/upload_images/5308475-68c51498744e1636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h1 id="26-博文置顶"><a href="#26-博文置顶" class="headerlink" title="26. 博文置顶"></a>26. 博文置顶</h1><p>修改 <code>hero-generator-index</code> 插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var pagination &#x3D; require(&#39;hexo-pagination&#39;);</span><br><span class="line">module.exports &#x3D; function(locals)&#123;</span><br><span class="line">  var config &#x3D; this.config;</span><br><span class="line">  var posts &#x3D; locals.posts;</span><br><span class="line">    posts.data &#x3D; posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; &#x2F;&#x2F; 两篇文章top都有定义</span><br><span class="line">            if(a.top &#x3D;&#x3D; b.top) return b.date - a.date; &#x2F;&#x2F; 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; &#x2F;&#x2F; 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; &#x2F;&#x2F; 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; &#x2F;&#x2F; 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir &#x3D; config.pagination_dir || &#39;page&#39;;</span><br><span class="line">  return pagination(&#39;&#39;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&#39;index&#39;, &#39;archive&#39;],</span><br><span class="line">    format: paginationDir + &#39;&#x2F;%d&#x2F;&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在文章中添加 <code>top</code> 值，数值越大文章越靠前，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 解决Charles乱码问题</span><br><span class="line">date: 2017-05-22 22:45:48</span><br><span class="line">tags: 技巧</span><br><span class="line">categories: 技巧</span><br><span class="line">copyright: true</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="27-修改字体大小"><a href="#27-修改字体大小" class="headerlink" title="27. 修改字体大小"></a>27. 修改字体大小</h1><p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，将<code>$font-size-base</code>改成<code>16px</code>，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$font-size-base            &#x3D;16px</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="28-修改打赏字体不闪动"><a href="#28-修改打赏字体不闪动" class="headerlink" title="28. 修改打赏字体不闪动"></a>28. 修改打赏字体不闪动</h1><p>修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数<code>wechat:hover</code>和<code>alipay:hover</code>，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 注释文字闪动函数</span><br><span class="line"> #wechat:hover p&#123;</span><br><span class="line">    animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"> #alipay:hover p&#123;</span><br><span class="line">   animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="29-侧边栏推荐阅读"><a href="#29-侧边栏推荐阅读" class="headerlink" title="29. 侧边栏推荐阅读"></a>29. 侧边栏推荐阅读</h1><p>今天有位网友问推荐阅读是怎么弄，其实挺简单的，打开主题配置文件修改成这样就行了(links里面写你想要的链接):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Blogrolls</span><br><span class="line">links_title: 推荐阅读</span><br><span class="line">#links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  优设: http:&#x2F;&#x2F;www.uisdc.com&#x2F;</span><br><span class="line">  张鑫旭: http:&#x2F;&#x2F;www.zhangxinxu.com&#x2F;</span><br><span class="line">  Web前端导航: http:&#x2F;&#x2F;www.alloyteam.com&#x2F;nav&#x2F;</span><br><span class="line">  前端书籍资料: http:&#x2F;&#x2F;www.36zhen.com&#x2F;t?id&#x3D;3448</span><br><span class="line">  百度前端技术学院: http:&#x2F;&#x2F;ife.baidu.com&#x2F;</span><br><span class="line">  google前端开发基础: http:&#x2F;&#x2F;wf.uisdc.com&#x2F;cn&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="30-自定义鼠标样式"><a href="#30-自定义鼠标样式" class="headerlink" title="30. 自定义鼠标样式"></a>30. 自定义鼠标样式</h1><p>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面写下如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(&quot;http:&#x2F;&#x2F;om8u46rmb.bkt.clouddn.com&#x2F;sword2.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(&quot;http:&#x2F;&#x2F;om8u46rmb.bkt.clouddn.com&#x2F;sword1.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p>
<hr>
<h1 id="31-为博客加上萌萌的宠物"><a href="#31-为博客加上萌萌的宠物" class="headerlink" title="31.为博客加上萌萌的宠物"></a>31.为博客加上萌萌的宠物</h1><p><strong>实现效果图</strong><br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15006365382590.jpg" alt=""></p>
<p><strong>具体实现方法</strong><br>在终端切换到你的博客的路径里，然后输入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p><del>然后打开<code>Hexo/blog/themes/next/layout</code><br>的<code>_layout.swig</code>,将下面代码放到<code>&lt;/body&gt;</code>之前：</del></p>
<p>(<strong>注意，由于官方更新了包，所以画删除线的不用弄</strong>)</p>
<p>然后在在 <code>hexo</code> 的 <code>_config.yml</code>中添加参数：（具体配置可以看<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">官方文档</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>

<p>然后hexo clean ，hexo g ，hexo d 就可以看到了。</p>
<blockquote>
<p>注意！如果你在 hexo d 的时候出现我下面这个问题<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhrqw92685j31dk0q4grl.jpg" alt=""><br>你可以这样，首先删除hexo 下面的.deploy_git文件夹，然后运行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重新 hexo clean,hexo g,hexo d就行了</p>
</blockquote>
<hr>
<h1 id="32-DaoVoice-在线联系"><a href="#32-DaoVoice-在线联系" class="headerlink" title="32.DaoVoice 在线联系"></a>32.DaoVoice 在线联系</h1><p><strong>实现效果图</strong></p>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-053222.png" alt=""></p>
<p><strong>具体实现方法</strong></p>
<p>首先在 <a href="https://account.daocloud.io/signin" target="_blank" rel="noopener">daovoice</a> 注册账号,<a href="http://dashboard.daovoice.io/get-started?invite_code=0f81ff2f" target="_blank" rel="noopener">邀请码</a>是<code>0f81ff2f</code>，注册完成后会得到一个 app_id :</p>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-054308.png" alt=""><br>记下这个 app_id的值，然后打开<code>/themes/next/layout/_partials/head.swig</code>,写下如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]&#x3D;r;i[r]&#x3D;i[r]||function()&#123;(i[r].q&#x3D;i[r].q||[]).push(arguments)&#125;,i[r].l&#x3D;1*new Date();a&#x3D;s.createElement(o),m&#x3D;s.getElementsByTagName(o)[0];a.async&#x3D;1;a.src&#x3D;g;a.charset&#x3D;&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&#39;https:&#39; &#x3D;&#x3D; document.location.protocol ? &#39;https:&#39; : &#39;http:&#39;) + &quot;&#x2F;&#x2F;widget.daovoice.io&#x2F;widget&#x2F;0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&#39;init&#39;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&#39;update&#39;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-054603.png" alt=""></p>
<p>接着打开<strong>主题配置文件</strong>，在最后写下如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: true</span><br><span class="line"></span><br><span class="line">daovoice_app_id: 这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure>

<p>重新 hexo g ，hexo s 就能看到效果了。</p>
<blockquote>
<p>安装成功后可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式，附上我的设置</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-055639.png" alt=""></p>
<hr>
<h1 id="33-点击爆炸效果"><a href="#33-点击爆炸效果" class="headerlink" title="33.点击爆炸效果"></a>33.点击爆炸效果</h1><p><strong>实现效果图</strong></p>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-084649.png" alt=""></p>
<p><strong>实现方法</strong></p>
<p>跟那个红心是差不多的，首先在<code>themes/next/source/js/src</code>里面建一个叫fireworks.js的文件，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>
<p>打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt; </span><br><span class="line">   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt; </span><br><span class="line">   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件，在里面最后写下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Fireworks</span><br><span class="line">fireworks: true</span><br></pre></td></tr></table></figure>

<p>完😀</p>
<hr>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><blockquote>
<p>感谢大神们的文章，真的学到了许多，有些忘了记录下来，在这里由衷的感谢。虽然比较折腾，但是确实满满的成就感，Road endless its long and far, I will seek up and down！</p>
</blockquote>
<p>欢迎访问<a href="http://shenzekun.cn/" target="_blank" rel="noopener">我的博客</a></p>
<hr>
<h4 id="参考的文章："><a href="#参考的文章：" class="headerlink" title="参考的文章："></a>参考的文章：</h4><ol>
<li><a href="http://blog.csdn.net/MasterAnt_D/article/details/56839222" target="_blank" rel="noopener">http://blog.csdn.net/MasterAnt_D/article/details/56839222</a></li>
<li><a href="http://zidingyi4qh.com/2017/04/27/NexT%E5%BA%95%E9%83%A8logo%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/" target="_blank" rel="noopener">http://zidingyi4qh.com/2017/04/27/NexT%E5%BA%95%E9%83%A8logo%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/</a></li>
<li><a href="https://fuyis.me/2017/01/25/Hexo-theme-next-and-optimized-configuration/" target="_blank" rel="noopener">https://fuyis.me/2017/01/25/Hexo-theme-next-and-optimized-configuration/</a></li>
<li><a href="http://www.vitah.net/posts/20f300cc/" target="_blank" rel="noopener">http://www.vitah.net/posts/20f300cc/</a></li>
<li><a href="http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</a></li>
<li><a href="https://chanshiyu.com/2017/11/24/%E5%8F%98%E5%BD%A2%E8%AE%B0%20%E2%97%8F%20NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">https://chanshiyu.com/2017/11/24/%E5%8F%98%E5%BD%A2%E8%AE%B0%20%E2%97%8F%20NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</a></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>html5调用摄像头功能</title>
    <url>/html5%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前些天，线上笔试的时候，发现需要浏览器同意开启摄像头，感觉像是 js 调用的，由于当时笔试，也就没想到这么多🤣。今天闲来无事，看了下自己的 todo，发现有这个调用摄像头的todo，才想到😂。网上查了一下，果然 js 有调用摄像头的 api，为此自己写一个 demo ，避免忘记。</p>
</blockquote>
<a id="more"></a>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="调用摄像头"><a href="#调用摄像头" class="headerlink" title="调用摄像头"></a>调用摄像头</h3><p>一共有两种实现方式，一种是使用<code>navigator.getUserMedia</code>（<strong>该特性已经从 Web 标准中删除</strong>，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性），<strong>前面一种已经从 Web 标准中删除</strong>，仅为了向后兼容而存在，第二种是使用<code>navigator.mediaDevices.getUserMedia</code>(<strong>推荐使用</strong>),这两种方法 Safari 貌似都不支持。。。。</p>
<ul>
<li>第一种方法<code>navigator.getUserMedia</code>用法详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/getUserMedia" target="_blank" rel="noopener">mdn</a> ，代码如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>摄像头调用1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"v"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        !(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">userMedia</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> navigator.getUserMedia = navigator.getUserMedia ||</span></span><br><span class="line">                    navigator.webkitGetUserMedia ||</span><br><span class="line">                    navigator.mozGetUserMedia ||</span><br><span class="line"><span class="actionscript">                    navigator.msGetUserMedia || <span class="literal">null</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            if (userMedia()) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> constraints = &#123;</span></span><br><span class="line"><span class="actionscript">                    video: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    audio: <span class="literal">false</span></span></span><br><span class="line">                &#125;;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> media = navigator.getUserMedia(constraints, <span class="function"><span class="keyword">function</span> <span class="params">(stream)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> v = <span class="built_in">document</span>.getElementById(<span class="string">'v'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> url = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span></span><br><span class="line">                    v.src = url ? url.createObjectURL(stream) : stream;</span><br><span class="line">                    v.play();</span><br><span class="line"><span class="actionscript">                &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"ERROR"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(error);</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"不支持"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>第二种方法<code>navigator.mediaDevices.getUserMedia</code>用法详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia" target="_blank" rel="noopener">mdn</a>。<code>navigator.mediaDevices.getUserMedia</code> 其实和第一种差不多，主要第二种返回是一个 Promise 对象，代码如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>摄像头调用2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"v"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        !(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 老的浏览器可能根本没有实现 mediaDevices，所以我们可以先设置一个空的对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (navigator.mediaDevices === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line">                navigator.mediaDevices = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                navigator.mediaDevices.getUserMedia = <span class="function"><span class="keyword">function</span> <span class="params">(constraints)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 首先，如果有getUserMedia的话，就获得它</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 一些浏览器根本没实现它 - 那么就返回一个error到promise的reject来保持一个统一的接口</span></span></span><br><span class="line">                    if (!getUserMedia) &#123;</span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'getUserMedia is not implemented in this browser'</span>));</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 否则，为老的navigator.getUserMedia方法包裹一个Promise</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line">                        getUserMedia.call(navigator, constraints, resolve, reject);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> constraints = &#123;</span></span><br><span class="line"><span class="actionscript">                video: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                audio: <span class="literal">false</span></span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> promise = navigator.mediaDevices.getUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">            promise.then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> v = <span class="built_in">document</span>.getElementById(<span class="string">'v'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 旧的浏览器可能没有srcObject</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="string">"srcObject"</span> <span class="keyword">in</span> v) &#123;</span></span><br><span class="line">                    v.srcObject = stream;</span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 防止再新的浏览器里使用它，应为它已经不再支持了</span></span></span><br><span class="line"><span class="javascript">                    v.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                v.onloadedmetadata = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                    v.play();</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.error(err.name + <span class="string">": "</span> + err.message);</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="拍照"><a href="#拍照" class="headerlink" title="拍照"></a>拍照</h3><p>思路是设置一个标志变量 videoPlaying 看看是否 video 有在 play，监听拍照按钮的点击事件，如果videoPlaying 为 true ，使用一个canvas 获取 video 的宽高（默认 canvas 是不显示的），然后使用 canvas 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">drawImage</a>,然后使用 canvas 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">toDataURL</a>返回一个 data url，将这个 url，设置在一个 img 标签上即可😀</p>
<ul>
<li>第一种方法<code>navigator.getUserMedia</code>实现代码：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>拍照1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"take"</span>&gt;</span>拍照<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"v"</span> <span class="attr">style</span>=<span class="string">"width: 640px;height: 480px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://placehold.it/640&amp;text=Your%20image%20here%20..."</span> <span class="attr">id</span>=<span class="string">"photo"</span> <span class="attr">alt</span>=<span class="string">"photo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        !(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">userMedia</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> navigator.getUserMedia = navigator.getUserMedia ||</span></span><br><span class="line">                    navigator.webkitGetUserMedia ||</span><br><span class="line">                    navigator.mozGetUserMedia ||</span><br><span class="line"><span class="actionscript">                    navigator.msGetUserMedia || <span class="literal">null</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            if (userMedia()) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> videoPlaying = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> constraints = &#123;</span></span><br><span class="line"><span class="actionscript">                    video: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    audio: <span class="literal">false</span></span></span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'v'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> media = navigator.getUserMedia(constraints, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> url = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span></span><br><span class="line">                    video.src = url ? url.createObjectURL(stream) : stream;</span><br><span class="line">                    video.play();</span><br><span class="line"><span class="actionscript">                    videoPlaying = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">                &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"ERROR"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(error);</span></span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">'take'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    if (videoPlaying) &#123;</span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></span><br><span class="line">                        canvas.width = video.videoWidth;</span><br><span class="line">                        canvas.height = video.videoHeight;</span><br><span class="line"><span class="actionscript">                        canvas.getContext(<span class="string">'2d'</span>).drawImage(video, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> data = canvas.toDataURL(<span class="string">'image/webp'</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">'photo'</span>).setAttribute(<span class="string">'src'</span>, data);</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"不支持"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种<code>navigator.mediaDevices.getUserMedia</code>实现方法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>拍照2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"take"</span>&gt;</span>拍照<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"v"</span> <span class="attr">style</span>=<span class="string">"width: 640px;height: 480px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://placehold.it/640&amp;text=Your%20image%20here%20..."</span> <span class="attr">id</span>=<span class="string">"photo"</span> <span class="attr">alt</span>=<span class="string">"photo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        !(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 老的浏览器可能根本没有实现 mediaDevices，所以我们可以先设置一个空的对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (navigator.mediaDevices === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line">                navigator.mediaDevices = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                navigator.mediaDevices.getUserMedia = <span class="function"><span class="keyword">function</span> <span class="params">(constraints)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 首先，如果有getUserMedia的话，就获得它</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 一些浏览器根本没实现它 - 那么就返回一个error到promise的reject来保持一个统一的接口</span></span></span><br><span class="line">                    if (!getUserMedia) &#123;</span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'getUserMedia is not implemented in this browser'</span>));</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 否则，为老的navigator.getUserMedia方法包裹一个Promise</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line">                        getUserMedia.call(navigator, constraints, resolve, reject);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> constraints = &#123;</span></span><br><span class="line"><span class="actionscript">                video: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                audio: <span class="literal">false</span></span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> videoPlaying = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> v = <span class="built_in">document</span>.getElementById(<span class="string">'v'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> promise = navigator.mediaDevices.getUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">            promise.then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 旧的浏览器可能没有srcObject</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="string">"srcObject"</span> <span class="keyword">in</span> v) &#123;</span></span><br><span class="line">                    v.srcObject = stream;</span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 防止再新的浏览器里使用它，应为它已经不再支持了</span></span></span><br><span class="line"><span class="javascript">                    v.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                v.onloadedmetadata = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                    v.play();</span><br><span class="line"><span class="actionscript">                    videoPlaying = <span class="literal">true</span>;</span></span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.error(err.name + <span class="string">": "</span> + err.message);</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'take'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                if (videoPlaying) &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></span><br><span class="line">                    canvas.width = v.videoWidth;</span><br><span class="line">                    canvas.height = v.videoHeight;</span><br><span class="line"><span class="actionscript">                    canvas.getContext(<span class="string">'2d'</span>).drawImage(v, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> data = canvas.toDataURL(<span class="string">'image/webp'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">'photo'</span>).setAttribute(<span class="string">'src'</span>, data);</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">            &#125;, <span class="literal">false</span>);</span></span><br><span class="line">        &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 的 call 与 apply 速度对比</title>
    <url>/js-%E7%9A%84-call-%E4%B8%8E-apply-%E9%80%9F%E5%BA%A6%E5%AF%B9%E6%AF%94.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>最近在看 underscore 的源码时发现，作者好多都用 call，而用 apply 比较少，比如说下面这段：👇</p>
</blockquote>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> optimizeCb = <span class="function"><span class="keyword">function</span>(<span class="params">func, context, argCount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果没有指定 this 指向，则返回原函数</span></span><br><span class="line">  <span class="keyword">if</span> (context === <span class="keyword">void</span> <span class="number">0</span>) <span class="keyword">return</span> func;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (argCount == <span class="literal">null</span> ? <span class="number">3</span> : argCount) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.call(context, value);</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value, other</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.call(context, value, other);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有指定 this，但没有传入 argCount 参数</span></span><br><span class="line">    <span class="comment">// 则执行以下 case</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value, index, collection</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.call(context, value, index, collection);</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">accumulator, value, index, collection</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.call(context, accumulator, value, index, collection);</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>既然 call 和 apply 都能用，那为什么只用 call 而不用 apply 呢？<br>经过网上的搜索发现，<strong>call 比 apply 速度快</strong>，在 console运行如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">a,b</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"call"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">  x.call(<span class="keyword">this</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"call"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"apply"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000</span>; j++) &#123;</span><br><span class="line">  x.apply(<span class="keyword">this</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"apply"</span>);</span><br></pre></td></tr></table></figure>

<p>console的结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-2f25092ecb658b17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>可以发现 call 比 apply 快了10ms 左右，那是什么原因造成这样的呢？<br><strong>因为 apply 运行前要对作为参数的数组进行一系列检验和深拷贝，而 call 则没有</strong><br>我们看一下 ECMAScript 是怎么写的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-40f7c9167b3a338d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-93025d076479f624.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>由ECMAScript 标准发现 apply 比 call 的步骤多了好多，这就是 call 比 apply 执行速度快的原因！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs 路径解析顺序</title>
    <url>/nodejs-%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>平时在使用 nodejs 去 require 的时候是不是有使用绝对路径或者相对路径去引用，那么 nodejs 解析路径顺序是怎么样的呢？接下来我会讲一下 nodejs 路径解析顺序</p>
</blockquote>
<a id="more"></a>

<h2 id="相对路径解析顺序"><a href="#相对路径解析顺序" class="headerlink" title="相对路径解析顺序"></a>相对路径解析顺序</h2><p>假设有一个文件路径为 <code>/root/src/moduleA.js</code>，包含了一个导入<code>var x = require(&quot;./moduleB&quot;);</code>, 也就是导入了一个相对路径的一个模块，那么Node.js以下面的顺序解析这个导入：</p>
<ul>
<li>到<code>/root/src/moduleB.js</code>这个路径是否存在，如果不存在进入下一步。</li>
<li>检查<code>/root/src/moduleB</code> 目录是否包含一个<code>package.json</code>文件，且<code>package.json</code>文件指定了一个”main”模块,比如 ，Node.js发现文件 <code>/root/src/moduleB/package.json</code> 包含了 <code>{ &quot;main&quot;: &quot;lib/mainModule.js&quot; }</code>,那么 nodejs 就会去 <code>/root/src/moduleB/lib/mainModule.js</code></li>
<li>如果没有 main 字段,nodejs会检查<code>/root/src/moduleB</code>目录是否包含一个 <code>index.js</code> 文件。 这个文件会被隐式地当作那个文件夹下的”main”模块。</li>
</ul>
<h2 id="绝对路径解析顺序"><a href="#绝对路径解析顺序" class="headerlink" title="绝对路径解析顺序"></a>绝对路径解析顺序</h2><p>假设有一个文件路径为<code>/root/src/moduleA.js</code>，里面包含了一个导入<code>var x = require(&quot;moduleB&quot;);</code>，也就是绝对路径的一个模块，那么Node.js以下面的顺序解析这个导入：</p>
<ul>
<li><code>/root/src/node_modules/moduleB.js</code></li>
<li><code>/root/src/node_modules/moduleB/package.json</code>（里面指定了 main 字段，跟上面相对路径是一样的）</li>
<li><code>/root/src/node_modules/moduleB/index.js</code><br>如果上面三个没有找到，往<strong>上一级</strong>目录找：</li>
<li><code>/root/node_modules/moduleB.js</code></li>
<li><code>/root/node_modules/moduleB/package.json</code></li>
<li><code>/root/node_modules/moduleB/index.js</code><br>如果还没有找到，继续往<strong>上一级</strong>找：</li>
<li><code>/node_modules/moduleB.js</code></li>
<li><code>/node_modules/moduleB/package.json</code></li>
<li><code>/node_modules/moduleB/index.js</code></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node简单实现一个更改头像功能</title>
    <url>/node%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E6%94%B9%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>一直想写这篇文章，无奈由于要考试的原因，一直在复习，拖延到现在才写🤣，之前用 node 的 express 框架写了个小项目，里面有个上传图片的功能，这里记录一下如何实现（我使用的是 <strong>ejs</strong>）📝</p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li><p><strong>首先</strong>，当用户点击上传头像，更新头像的时候，将头像上传到项目的一个文件夹里面（<em>我是存放在项目的<code>public/images/img</code>里面</em>），并且将图像名重命名（<em>可以以时间戳来命名</em>）。<img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15144357069018.jpg" alt=""></p>
</li>
<li><p><strong>同时</strong>图片在项目的路径插入到用户表的当前用户的 <code>userpicturepath</code> 里面</p>
</li>
<li><p>然后更新用户的 session，将图片里面的路径赋值给 session 的里面的<code>picture</code>属性里面</p>
</li>
<li><p><code>&lt;img&gt;</code> 的 <code>src</code> 获取到当前用户的session里面的 <code>picture</code> 的值，最后动态刷新页面头像就换成了用户上传的头像了</p>
</li>
</ol>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-28-user-upload.gif" alt=""></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>ejs部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img class&#x3D;&quot;nav-user-photo&quot; src&#x3D;&quot;&lt;%&#x3D; user.picture.replace(&#x2F;public(\&#x2F;.*)&#x2F;, &quot;$1&quot;) %&gt;&quot; alt&#x3D;&quot;Photo&quot; style&#x3D;&quot;height: 40px;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot; name&#x3D;&quot;fileInfo&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; accept&#x3D;&quot;image&#x2F;png,image&#x2F;jpg&quot; id&#x3D;&quot;picUpload&quot; name&#x3D;&quot;file&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; id&#x3D;&quot;modifyPicV&quot;&gt;确定&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<p>js部分</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#modifyPicV'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">"file"</span>,$(<span class="string">"input[name='file']"</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);<span class="comment">//把文件对象插到formData对象上</span></span><br><span class="line">    <span class="built_in">console</span>.log(formData.get(<span class="string">'file'</span>));</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">'/modifyPic'</span>,</span><br><span class="line">        type:<span class="string">'post'</span>,</span><br><span class="line">        data: formData,</span><br><span class="line">        processData: <span class="literal">false</span>,  <span class="comment">// 不处理数据</span></span><br><span class="line">        contentType: <span class="literal">false</span>,   <span class="comment">// 不设置内容类型</span></span><br><span class="line">        success:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'success'</span>);</span><br><span class="line">            location.reload();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>路由部分，使用<code>formidable</code>，这是一个Node.js模块，用于解析表单数据，尤其是文件上传</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> router = express.Router();</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> &#123;User&#125; = <span class="built_in">require</span>(<span class="string">'../data/db'</span>);</span><br><span class="line"><span class="keyword">let</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</span><br><span class="line"><span class="keyword">let</span> cacheFolder = <span class="string">'public/images/'</span>;<span class="comment">//放置路径</span></span><br><span class="line">router.post(<span class="string">'/modifyPic'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userDirPath = cacheFolder + <span class="string">"Img"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(userDirPath)) &#123;</span><br><span class="line">        fs.mkdirSync(userDirPath);<span class="comment">//创建目录</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> form = <span class="keyword">new</span> formidable.IncomingForm(); <span class="comment">//创建上传表单</span></span><br><span class="line">    form.encoding = <span class="string">'utf-8'</span>; <span class="comment">//设置编码</span></span><br><span class="line">    form.uploadDir = userDirPath; <span class="comment">//设置上传目录</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>; <span class="comment">//保留后缀</span></span><br><span class="line">    form.maxFieldsSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">//文件大小</span></span><br><span class="line">    form.type = <span class="literal">true</span>;</span><br><span class="line">    form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> extName = <span class="string">''</span>; <span class="comment">//后缀名</span></span><br><span class="line">        <span class="keyword">switch</span> (files.file.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'image/pjpeg'</span>:</span><br><span class="line">                extName = <span class="string">'jpg'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'image/jpeg'</span>:</span><br><span class="line">                extName = <span class="string">'jpg'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'image/png'</span>:</span><br><span class="line">                extName = <span class="string">'png'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'image/x-png'</span>:</span><br><span class="line">                extName = <span class="string">'png'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (extName.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">                msg: <span class="string">'只支持png和jpg格式图片'</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> avatarName = <span class="string">'/'</span> + <span class="built_in">Date</span>.now() + <span class="string">'.'</span> + extName;</span><br><span class="line">            <span class="keyword">let</span> newPath = form.uploadDir + avatarName;</span><br><span class="line">            fs.renameSync(files.file.path, newPath); <span class="comment">//重命名</span></span><br><span class="line">            <span class="built_in">console</span>.log(newPath)</span><br><span class="line">            <span class="comment">//更新表</span></span><br><span class="line">            User.update(&#123;</span><br><span class="line">                picture: newPath</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                where: &#123;</span><br><span class="line">                    username: req.session.user.username</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data[<span class="number">0</span>] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    User.findAll(&#123;</span><br><span class="line">                        where: &#123;</span><br><span class="line">                            username: req.session.user.username</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (data[<span class="number">0</span>] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                            req.session.user.picture = data[<span class="number">0</span>].dataValues.picture;</span><br><span class="line">                            res.send(<span class="literal">true</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            res.send(<span class="literal">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>react-native问题汇总</title>
    <url>/react-native%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前些天使用react-native 写了个项目，遇到的问题挺多的，在这里记录下来📝，避免忘记。本篇文章会不定期更新!</p>
</blockquote>
<a id="more"></a>

<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>出现Remote debugger is in a background tab which may cause apps to perform slowly黄色警报<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-043813.png" alt=""></p>
<p><strong>解决方法</strong><br>把那个chrome的Tab页保持最前，窗口不要最小化就好了。。。。</p>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>出现connection to <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 红色错误<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-044331.png" alt=""></p>
<p><strong>解决方法</strong><br>这个很神奇。遇到了多按 ⌘R几下或者把模拟器上的项目删除之后重新加载一般就会解决。</p>
<blockquote>
<p>bad news: metro v0.29.0 won’t work with RN 0.54-0.55 because it introduced a new config param that RN is not handling yet (we’re working on improving configuration compatibility between RN and metro).</p>
</blockquote>
<blockquote>
<p>good news: the actual fix needed to solve this issue is in the RN repo (7be3d1c), so cherry-picking it into the 0.54 and 0.55 branches and releasing a RN minor version will fix this. (cc @hramos, @grabbou ).</p>
</blockquote>
<p>或者使用下面命令可以解决问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn cache clean&amp;&amp;yarn</span><br></pre></td></tr></table></figure>

<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p>出现Runtime is not ready for debugging红色错误<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-044718.png" alt=""></p>
<p><strong>两种解决方法</strong></p>
<ol>
<li>关掉<a href="http://localhost:8081/debugger-ui/" target="_blank" rel="noopener">http://localhost:8081/debugger-ui/</a> 再重新开启就行了</li>
<li>按 command+d 将Debug JS Remotely关掉也可以</li>
</ol>
<h3 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h3><p>出现Unrecognized font family 红色报警<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-045023.png" alt=""></p>
<p><strong>解决方法</strong><br>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">react-native link react-native-vector-icons</span><br></pre></td></tr></table></figure>

<p>然后重新启动即可</p>
<h3 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h3><p>React Native不支持自动计算Image等View的大小</p>
<p><a href="http://facebook.github.io/react-native/docs/images.html#why-not-automatically-size-everything" target="_blank" rel="noopener">详情</a></p>
<h3 id="问题六"><a href="#问题六" class="headerlink" title="问题六"></a>问题六</h3><p>react-native-interactable 出现 Invariant Violation红色警报<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15257552426894.jpg" alt=""></p>
<p><strong>解决方法</strong><br>降级：将 react-native 版本降到0.53.0 就行了<br>参考 <a href="https://github.com/wix/react-native-interactable/issues/185" target="_blank" rel="noopener">wix/react-native-interactable#185</a></p>
<h3 id="问题七"><a href="#问题七" class="headerlink" title="问题七"></a>问题七</h3><p>Build后遇到’No bundle URL present’ error<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-045522.png" alt=""></p>
<p><strong>解决方法</strong><br>关闭SS,VPN这类的服务，重新 <code>react-native run-ios</code> 即可。很神奇。。。</p>
<p>官方也有这个 <a href="https://github.com/facebook/react-native/issues/12754" target="_blank" rel="noopener">issue</a></p>
<h3 id="问题八"><a href="#问题八" class="headerlink" title="问题八"></a>问题八</h3><p>出现regeneratorRuntime is not defined<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-045839.png" alt=""></p>
<p><strong>解决方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">react-native start --reset-cache</span><br></pre></td></tr></table></figure>

<p>最终原因是因为一个组件没删干净🤣</p>
<h3 id="问题九"><a href="#问题九" class="headerlink" title="问题九"></a>问题九</h3><p>出现:CFBundleIdentifier”, Does Not Exist 错误</p>
<p><strong>解决方法</strong><br>打开 xcode 运行项目出现<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-050038.png" alt=""><br>在这里面有个 libInteractable.a 删除掉就行了<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-050103.png" alt=""></p>
<p>参考：<a href="https://github.com/rebeccahughes/react-native-device-info/issues/251" target="_blank" rel="noopener">rebeccahughes/react-native-device-info#251</a></p>
<h3 id="问题十"><a href="#问题十" class="headerlink" title="问题十"></a>问题十</h3><p>删除包注意事项</p>
<p>首先 <code>react-native unlink &lt;lib name&gt;</code><br>然后 <code>yarn remove &lt;lib name&gt;</code></p>
<p><strong>一定要这样做</strong>不然会有问题。。。</p>
<h3 id="问题十一"><a href="#问题十一" class="headerlink" title="问题十一"></a>问题十一</h3><p>出现Invariant Violation: View config not found for name 红色警报<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-050336.png" alt=""></p>
<p><strong>解决方法</strong><br><a href="https://stackoverflow.com/questions/46750477/react-native-invariant-violation-view-config" target="_blank" rel="noopener">https://stackoverflow.com/questions/46750477/react-native-invariant-violation-view-config</a></p>
<h3 id="问题十二"><a href="#问题十二" class="headerlink" title="问题十二"></a>问题十二</h3><p>Button 组件无法直接使用 style定宽度和高度等等</p>
<p><strong>解决方法</strong></p>
<blockquote>
<p>If this button doesn’t look right for your app, you can build your own button using TouchableOpacity or TouchableNativeFeedback.</p>
</blockquote>
<p>也就是说可以使用 <code>TouchableOpacity</code> 或者 <code>TouchableNativeFeedback</code> 组件代替</p>
<h3 id="问题十三"><a href="#问题十三" class="headerlink" title="问题十三"></a>问题十三</h3><p>使用TouchableWithoutFeedback 出现错误<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-050857.png" alt=""></p>
<p><strong>解决方法</strong><br>TouchableWithoutFeedback，这个组件必须至少有一个child，如果是多个组件，必须以view来包装。写成这样就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  return(</span><br><span class="line">      &lt;TouchableWithoutFeedback style&#x3D;&#123;&#123;flex: 1&#125;&#125; onPress&#x3D;&#123;dismissKeyboard&#125;&gt;</span><br><span class="line">            &lt;View style&#x3D;&#123;&#123;flex: 1&#125;&#125;&gt;</span><br><span class="line">      。。。。。。。。。。</span><br><span class="line">    &lt;&#x2F;View&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;TouchableWithoutFeedback&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="问题十四"><a href="#问题十四" class="headerlink" title="问题十四"></a>问题十四</h3><p>xcode出现Showing All Messages Code signing is required for product type ‘Unit Test Bundle’ in SDK ‘iOS 11.2’<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-051045.png" alt=""></p>
<p>在Xcode上<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-051232.png" alt=""><br>即可</p>
<h3 id="问题十五"><a href="#问题十五" class="headerlink" title="问题十五"></a>问题十五</h3><p>react-navigation TabNavigator点击切换反应迟钝。</p>
<p>在真机上调试react-navigation的TabNavigator，点击tab总感觉反应很慢，试了好久都是这样，大概有0.5秒之后才会切换体验很差。</p>
<p><strong>解决方法</strong><br>关闭debug模式。。。。</p>
<h3 id="问题十六"><a href="#问题十六" class="headerlink" title="问题十六"></a>问题十六</h3><p>React Navigation TabNavigator 一个帧的延迟</p>
<p>当页面加载时，下面的 tab 图标从第一个到第二个图标有一个帧的延迟</p>
<p><strong>解决方法</strong><br>定义initialLayout，用以防止react-native-tab-view渲染中一个帧的延迟</p>
<p>参考：<a href="https://github.com/react-native-community/react-native-tab-view#avoid-one-frame-delay" target="_blank" rel="noopener">https://github.com/react-native-community/react-native-tab-view#avoid-one-frame-delay</a></p>
<h3 id="问题十七"><a href="#问题十七" class="headerlink" title="问题十七"></a>问题十七</h3><p>出现timed out waiting for 红色警报<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-051715.png" alt=""></p>
<p><strong>解决方法</strong><br>重启模拟器。。。</p>
<h3 id="问题十八"><a href="#问题十八" class="headerlink" title="问题十八"></a>问题十八</h3><p>react native 没有&lt;br /&gt;组件换行</p>
<p><strong>解决方法</strong><br>可以在 Text 组件里写 {‘\n’},如：<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-051845.png" alt=""></p>
<h3 id="问题十九"><a href="#问题十九" class="headerlink" title="问题十九"></a>问题十九</h3><p>react native checkbox 原生组件只适合安卓</p>
<p><strong>解决方法</strong><br>可以使用这个 <a href="https://github.com/crazycodeboy/react-native-check-box" target="_blank" rel="noopener">https://github.com/crazycodeboy/react-native-check-box</a></p>
<h3 id="问题二十"><a href="#问题二十" class="headerlink" title="问题二十"></a>问题二十</h3><p>react-navigation的headerRight添加点击事件</p>
<p><strong>解决方法</strong><br>首先需要在componentDidMount(){}中动态的添加点击事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    this.props.navigation.setParams(&#123;</span><br><span class="line">        navigatePress:this.navigatePress</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">navigatePress &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    alert(&#39;点击headerRight&#39;);</span><br><span class="line">    console.log(this.props.navigation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就可以通过params方法来获取点击事件了（<strong>记住先要判断navigation.state.params是否存在，不然会报错</strong>。。。）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static navigationOptions &#x3D; (&#123; navigation, screenProps &#125;) &#x3D;&gt; (&#123;</span><br><span class="line">      title: navigation.state.params?navigation.state.params.title:null,</span><br><span class="line">      headerRight:(</span><br><span class="line">          &lt;Text onPress&#x3D;&#123;navigation.state.params?navigation.state.params.navigatePress:null&#125;&gt;</span><br><span class="line">              返回</span><br><span class="line">          &lt;&#x2F;Text&gt;</span><br><span class="line">      )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="问题二十一"><a href="#问题二十一" class="headerlink" title="问题二十一"></a>问题二十一</h3><p>react-navigation tab 点击 StatusBar 颜色问题 </p>
<p><strong>解决方法</strong><br>详情 <a href="https://reactnavigation.org/docs/status-bar.html" target="_blank" rel="noopener">https://reactnavigation.org/docs/status-bar.html</a></p>
<h3 id="问题二十二"><a href="#问题二十二" class="headerlink" title="问题二十二"></a>问题二十二</h3><p> Image 标签不支持 http 问题</p>
<p> <strong>解决方法</strong><br> ios 9 以上，默认是Https请求，如需支持Http，修改info.plist文件添加键值对就好了<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-052245.png" alt=""></p>
<h3 id="问题二十三"><a href="#问题二十三" class="headerlink" title="问题二十三"></a>问题二十三</h3><p>react-native-swiper 动态数据渲染，翻页出现错乱</p>
<p><strong>出现</strong><br>一开始，使用静态的数据没问题，但是使用动态加载数据就出现问题，经过一些调试发现，可能是 index 的问题，在 github 库里搜 issue 果然有人遇到过这个问题 <a href="https://github.com/leecade/react-native-swiper/issues/720" target="_blank" rel="noopener">https://github.com/leecade/react-native-swiper/issues/720</a></p>
<p><strong>解决方法</strong><br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-052442.png" alt=""><br>添加 key 值是你<strong>获取数据的长度</strong></p>
<h3 id="问题二十四"><a href="#问题二十四" class="headerlink" title="问题二十四"></a>问题二十四</h3><p>react-native-swiper 跳转索引 bug 问题。</p>
<p>一开始<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-052540.png" alt=""></p>
<p>在翻页的时候，出现索引随机变化的问题，当时看了一下 api 是没有问题的，一直定位到<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-052704.png" alt=""></p>
<p>将标题不显示就发现索引没有问题了，不会随机翻页。。。，接着在某一页看到题目比较大，发生了抖动，结果造成了随机翻页，再一看里面有数字和文字，大小不一样，设置一下字体就好了。。。。个人认为是抖动的时候可能触发了react-native-swiper的翻页，结果造成随机翻页。。。<br>神坑的 bug，找了4，5个小时。。。。😡</p>
<h3 id="问题二十五"><a href="#问题二十五" class="headerlink" title="问题二十五"></a>问题二十五</h3><p>ListView, FlatList, Sections and VirtualizedList paddingBottom 无效的问题。</p>
<p>ListView, FlatList, Sections and VirtualizedList 继承了 ScrollView<br>所以导致都有这个问题</p>
<p><strong>解决方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ScrollView contentContainerStyle&#x3D;&#123;&#123;paddingBottom: 16&#125;&#125; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="问题二十六"><a href="#问题二十六" class="headerlink" title="问题二十六"></a>问题二十六</h3><p>出现 could not connect to development server红色警报<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-05-08-052952.png" alt=""></p>
<p><strong>解决方法</strong><br>关掉 vpn ，或者不要开全局模式。。。很神奇</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react使用总结</title>
    <url>/react-%E4%BD%BF%E7%94%A8-%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>最近学了一些 react 和es6 的一些知识，并且使用 react 写了一个 TodoList 项目===&gt;<a href="http://shenzekun.cn/R-Todo/build/index.html" target="_blank" rel="noopener">预览</a> &amp;&amp; <a href="https://github.com/shenzekun/R-Todo" target="_blank" rel="noopener">源码</a> 感觉学的挺多的，并且遇到的坑也不少😂，说实话，一开始学 react 看到 jsx 语法有点不适应，说好的结构和行为分离呢😁，不过随着通过一个项目的完成，渐渐明白了这么写的好处</p>
</blockquote>
<a id="more"></a>

<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a><strong>好处</strong></h3><ul>
<li>自定义标签</li>
<li>结构清晰</li>
<li>代码模块化</li>
<li>更加语义化</li>
</ul>
<h3 id="不过也有缺点"><a href="#不过也有缺点" class="headerlink" title="不过也有缺点"></a><strong>不过也有缺点</strong></h3><ul>
<li>浏览器不支持这语法</li>
<li>必须通过一大堆工具来转换</li>
</ul>
<h3 id="一些需要注意的点"><a href="#一些需要注意的点" class="headerlink" title="一些需要注意的点"></a>一些需要注意的点</h3><p><strong>1. react声明组件时，组件名称必须以大写字母开头如</strong>👉：<code>&lt;Todo /&gt;</code><br><strong>2. 每个标签必须闭合,因为采用的 js+xml 写法，如</strong>👉: <code>&lt;input /&gt;</code><br><strong>3. 组件的返回值只能有一个顶层元素，如</strong>👇：</p>
<p>下面是错误的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>必须这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>4.  return后面要加一个括号,目的是防止 JavaScript 代码在解析时自动在换行处添加分号</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> renderSquare(i) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;Todo /&gt;</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>5. render()里面不能写 class,for,而是要写成<code>className</code>和<code>htmlFor</code>,因为 class ，for 是 javascript 的关键字，因此不能使用，如</strong>：</p>
<p>下面是错误的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;“xxx”&gt;</span><br></pre></td></tr></table></figure>
<p>而是要写 className：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div className&#x3D;&quot;xxx&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>6. 不要直接更新状态，如</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;</span><br></pre></td></tr></table></figure>
<p>此代码<strong>不会</strong>重新渲染组件的，之前就这么写，啥反应也没有😂，应该要用<code>setState()</code>:👇</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>（<strong>注意！！</strong>：构造函数（constructor）是唯一能够初始化 this.state 的地方。）</p>
<p><strong>7. 使用<code>style</code></strong></p>
<p>我们在 html 可以这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;background-color:red;&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>但是在 jsx 里面却不能这么写，必须用两个花括号包裹，并且里面不能写<code>-</code>，要用驼峰形式写，如上面的 <code>background-color</code>写成<code>backgroundColor</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&#123;&#123;backgroundColor: &#39;red&#39;&#125;&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>8. 关于 setState</strong></p>
<p>setState方法用于更新当前组件的state状态值，但调用这个方法后，state并不会立即更新，而是在render方法调用后才会更新</p>
<h3 id="react-特点"><a href="#react-特点" class="headerlink" title="react 特点"></a>react 特点</h3><ol>
<li><strong>虚拟DOM</strong>: React是以数据驱动的，每次数据变化React都会扫描整个虚拟DOM树，自动计算与上次虚拟DOM的差异变化，然后针对需要变化的部分进行实际的浏览器DOM更新。</li>
<li><strong>组件化：</strong> React可以从功能角度划分，将UI分解成不同组件，各组件都独立封装，整个UI是由一个个小组件构成的一个大组件，每个组件只关系自身的逻辑，彼此独立（比如你有个按钮，很多页面都有这个按钮，那么就可以把这个按钮封装成该组件）。</li>
<li><strong>单项数据流</strong>：React只有单向数据流动-从父节点传递到子节点</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 前端插件推荐</title>
    <url>/vscode-%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90.html</url>
    <content><![CDATA[<hr>
<a id="more"></a>


<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h3><blockquote>
<p>自动添加HTML / XML关闭标签（必备）</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15092830970499.gif" alt=""></p>
<h3 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h3><blockquote>
<p>自动重命名配对的HTML / XML标签(必备)</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15092838452118.gif" alt=""></p>
<h3 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h3><blockquote>
<p>格式化javascript，JSON，CSS，Sass，和HTML</p>
</blockquote>
<h3 id="Bootstrap-4-amp-Font-awesome-snippets"><a href="#Bootstrap-4-amp-Font-awesome-snippets" class="headerlink" title="Bootstrap 4 &amp; Font awesome snippets"></a>Bootstrap 4 &amp; Font awesome snippets</h3><blockquote>
<p>包含Bootstrap 4＆Font awesome 的代码片段</p>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fkzg3v9bfnj30rk02ymx1.jpg" alt=""></p>
<h3 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a>Bracket Pair Colorizer</h3><blockquote>
<p>颜色识别匹配括号</p>
</blockquote>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkzg8ththdj30k40500ss.jpg" alt=""></p>
<h3 id="Class-autocomplete-for-HTML"><a href="#Class-autocomplete-for-HTML" class="headerlink" title="Class autocomplete for HTML"></a>Class autocomplete for HTML</h3><blockquote>
<p>智能提示HTML class =“”属性（必备）</p>
</blockquote>
<h3 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a>Code Runner</h3><blockquote>
<p>非常强大的一款插件，能够运行多种语言的代码片段或代码文件：C，C ++，Java，JavaScript，PHP，Python，Perl，Ruby，Go等等，安装完成后，右上角出现：<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15092851845587.jpg" alt=""><br>点击这个按钮就可以运行你的文件了（必备）</p>
</blockquote>
<h3 id="css-peek"><a href="#css-peek" class="headerlink" title="css peek"></a>css peek</h3><blockquote>
<p>能够查看CSS ID和类的字符串作为HTML文件中相应的CSS定义（必备）</p>
</blockquote>
<p><strong>使用方法</strong>：将光标放在class里面的属性，右击<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15092856731870.jpg" alt=""></p>
<h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><blockquote>
<p>查文档必备，搭配 dash（不过似乎只有 mac 版）😁</p>
</blockquote>
<blockquote>
<p><strong>快捷键 <code>ctrl + h</code></strong> 它根据你当前选中的语言查找 dash 里面的文档</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/navicat-id-increase.gif" alt=""></p>
<h3 id="Debugger-for-Chrome"><a href="#Debugger-for-Chrome" class="headerlink" title="Debugger for Chrome"></a>Debugger for Chrome</h3><blockquote>
<p>让 vscode 映射 chrome 的 debug功能，使静态页面都可以用 vscode 来打断点调试</p>
</blockquote>
<p><strong>简单使用</strong>：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001470969077294a6455fc9cd1f48b69f82cd05e7fa9b40000" target="_blank" rel="noopener">戳我</a></p>
<h3 id="Document-This"><a href="#Document-This" class="headerlink" title="Document This"></a>Document This</h3><blockquote>
<p>添加注释块</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093400730364.jpg" alt=""></p>
<p><strong>设置：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;docthis.includeAuthorTag&quot;: true,&#x2F;&#x2F;出现@Author</span><br><span class="line">&quot;docthis.includeDescriptionTag&quot;: true,&#x2F;&#x2F;出现@Description</span><br><span class="line">&quot;docthis.authorName&quot;: &quot;shenzekun&quot;,&#x2F;&#x2F;作者名字</span><br></pre></td></tr></table></figure>

<p><strong>快捷键</strong>： 按两次Ctrl+alt+d</p>
<h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><blockquote>
<p>EsLint可以帮助我们检查Javascript编程时的语法错误。比如：在Javascript应用中，你很难找到你漏泄的变量或者方法。EsLint能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。</p>
</blockquote>
<p><strong>配置</strong>：<a href="https://segmentfault.com/a/1190000010462601" target="_blank" rel="noopener">戳我</a></p>
<h3 id="Font-awesome-codes-for-html"><a href="#Font-awesome-codes-for-html" class="headerlink" title="Font-awesome codes for html"></a>Font-awesome codes for html</h3><blockquote>
<p>用于 html 的Font-awesome代码片段</p>
</blockquote>
<h3 id="filesize"><a href="#filesize" class="headerlink" title="filesize"></a>filesize</h3><blockquote>
<p>在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093414045557.jpg" alt=""></p>
<h3 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h3><blockquote>
<p>以图表的形式查看git日志<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093254060028.jpg" alt=""></p>
</blockquote>
<p>使用 command+shift+p（Ctrl+shift+p） 输入git log就可以看到了</p>
<h3 id="Git-Lens"><a href="#Git-Lens" class="headerlink" title="Git Lens"></a>Git Lens</h3><blockquote>
<p>git 日志插件</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093256313651.jpg" alt=""></p>
<h3 id="HTML-CSS-Support"><a href="#HTML-CSS-Support" class="headerlink" title="HTML CSS Support"></a>HTML CSS Support</h3><blockquote>
<p>在 html 标签上写class 智能提示当前项目所支持的样式（必备）</p>
</blockquote>
<h3 id="HTML-Snippets"><a href="#HTML-Snippets" class="headerlink" title="HTML Snippets"></a>HTML Snippets</h3><blockquote>
<p>html 代码片段（必备）</p>
</blockquote>
<h3 id="htmlhint"><a href="#htmlhint" class="headerlink" title="htmlhint"></a>htmlhint</h3><blockquote>
<p>html代码检测</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093260108371.jpg" alt=""></p>
<h3 id="htmltagwrap"><a href="#htmltagwrap" class="headerlink" title="htmltagwrap"></a>htmltagwrap</h3><blockquote>
<p>可以在选中HTML标签中外面套一层标签</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/vscode-htmltagwrap.gif" alt=""></p>
<p><strong>使用</strong>：选择一大段代码，然后按“Alt + W”</p>
<h3 id="Indenticator"><a href="#Indenticator" class="headerlink" title="Indenticator"></a>Indenticator</h3><blockquote>
<p>突出目前的缩进深度</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/Indenticator.gif" alt=""></p>
<h3 id="IntelliSense-for-CSS-class-names"><a href="#IntelliSense-for-CSS-class-names" class="headerlink" title="IntelliSense for CSS class names"></a>IntelliSense for CSS class names</h3><p>智能提示 css 的 class 名</p>
<h3 id="Image-Preview"><a href="#Image-Preview" class="headerlink" title="Image Preview"></a>Image Preview</h3><blockquote>
<p>鼠标移到路径里显示图像预览</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093708776977.jpg" alt=""></p>
<h3 id="JavaScript-ES6-code-snippets"><a href="#JavaScript-ES6-code-snippets" class="headerlink" title="JavaScript (ES6) code snippets"></a>JavaScript (ES6) code snippets</h3><blockquote>
<p>es6代码片段（必备）</p>
</blockquote>
<h3 id="JavaScript-Snippet-Pack"><a href="#JavaScript-Snippet-Pack" class="headerlink" title="JavaScript Snippet Pack"></a>JavaScript Snippet Pack</h3><blockquote>
<p>js代码片段（必备）</p>
</blockquote>
<h3 id="jQuery-Code-Snippets"><a href="#jQuery-Code-Snippets" class="headerlink" title="jQuery Code Snippets"></a>jQuery Code Snippets</h3><blockquote>
<p>jQuery 代码片段</p>
</blockquote>
<h3 id="Live-Sass-Compiler"><a href="#Live-Sass-Compiler" class="headerlink" title="Live Sass Compiler"></a>Live Sass Compiler</h3><blockquote>
<p>实时编译 sass ,不过需要配置，附上我的配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;liveSassCompile.settings.formats&quot;:[</span><br><span class="line">        &#x2F;&#x2F; You can add more</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;format&quot;: &quot;compressed&quot;,&#x2F;&#x2F;压缩</span><br><span class="line">            &quot;extensionName&quot;: &quot;.min.css&quot;,&#x2F;&#x2F;编译后缀名</span><br><span class="line">            &quot;savePath&quot;: &quot;.&#x2F;css&quot;&#x2F;&#x2F;编译保存的路径</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>

<p><strong>使用</strong></p>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093281194279.jpg" alt=""></p>
<h3 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h3><blockquote>
<p>markdown 语法检查</p>
</blockquote>
<h3 id="Node-js-Modules-Intellisense"><a href="#Node-js-Modules-Intellisense" class="headerlink" title="Node.js Modules Intellisense"></a>Node.js Modules Intellisense</h3><blockquote>
<p>可以在导入语句中自动完成JavaScript / TypeScript模块。</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/vscode-node.gif" alt=""></p>
<h3 id="npm-Intellisense"><a href="#npm-Intellisense" class="headerlink" title="npm Intellisense"></a>npm Intellisense</h3><blockquote>
<p>在导入语句中自动填充npm模块,跟Node.js Modules Intellisense差不多</p>
</blockquote>
<h3 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a>open in browser</h3><blockquote>
<p>当前的 html 文件用浏览器打开，类似 webstorm 的那四个小浏览器图标功能，前提条件html 文件必须保存</p>
</blockquote>
<p><strong>快捷键alt+b</strong></p>
<h3 id="Output-Colorizer"><a href="#Output-Colorizer" class="headerlink" title="Output Colorizer"></a>Output Colorizer</h3><blockquote>
<p>输出提示的文字颜色有一些变化，方便获取关键信息</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093384952721.jpg" alt=""></p>
<h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h3><blockquote>
<p>路径自动补全（必备）</p>
</blockquote>
<h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><blockquote>
<p>格式化JavaScript / TypeScript / CSS 。</p>
</blockquote>
<h3 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h3><blockquote>
<p>工程项目过多时，shift+cmd+p(shift+ctrl+p) 然后输入project，第一次选择edit Project编辑自己的工程项目，之后就可以直接选择open打开你的项目</p>
</blockquote>
<h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h3><blockquote>
<p>写 sass 必备</p>
</blockquote>
<h3 id="vscode-faker"><a href="#vscode-faker" class="headerlink" title="vscode-faker"></a>vscode-faker</h3><blockquote>
<p>生成假数据，地址，电话，图片等等</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/vscode-faker.gif" alt=""></p>
<p>打开方式shift+cmd+p(shift+ctrl+p)) 然后输入faker 就可以选择了</p>
<h3 id="Quokka-js"><a href="#Quokka-js" class="headerlink" title="Quokka.js"></a>Quokka.js</h3><blockquote>
<p>实时观看 javascript 的变量的变化</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/vscode-quokka.gif" alt=""></p>
<p><strong>使用</strong>：先shift+cmd+p （ctrl+shift+p）输入 quokka 选择 new javascript 就行了😀</p>
<h3 id="Regex-Previewer"><a href="#Regex-Previewer" class="headerlink" title="Regex Previewer"></a>Regex Previewer</h3><blockquote>
<p>测试正则的插件</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093406954760.jpg" alt=""></p>
<h3 id="TSLint"><a href="#TSLint" class="headerlink" title="TSLint"></a>TSLint</h3><blockquote>
<p>检查typescript编程时的语法错误语法</p>
</blockquote>
<h3 id="TypeScript-Importer"><a href="#TypeScript-Importer" class="headerlink" title="TypeScript Importer"></a>TypeScript Importer</h3><blockquote>
<p>自动搜索工作区文件中的TypeScript定义，并将所有已知符号作为完成项，以允许代码完成。</p>
</blockquote>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/vscode-ts.gif" alt=""></p>
<h3 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h3><blockquote>
<p>目录树图标</p>
</blockquote>
<h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><h3 id="React-Native-React-Redux-snippets-for-es6-es7"><a href="#React-Native-React-Redux-snippets-for-es6-es7" class="headerlink" title="React-Native/React/Redux snippets for es6/es7"></a>React-Native/React/Redux snippets for es6/es7</h3><blockquote>
<p>react代码片段，下载人数超多😉</p>
</blockquote>
<h3 id="react-beautify"><a href="#react-beautify" class="headerlink" title="react-beautify"></a>react-beautify</h3><blockquote>
<p>格式化 javascript, JSX, typescript, TSX 文件</p>
</blockquote>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="vetur"><a href="#vetur" class="headerlink" title="vetur"></a>vetur</h3><blockquote>
<p>语法高亮、智能感知</p>
</blockquote>
<h3 id="VueHelper"><a href="#VueHelper" class="headerlink" title="VueHelper"></a>VueHelper</h3><blockquote>
<p>vue代码片段</p>
</blockquote>
<h3 id="Vue-TypeScript-Snippets"><a href="#Vue-TypeScript-Snippets" class="headerlink" title="Vue TypeScript Snippets"></a>Vue TypeScript Snippets</h3><blockquote>
<p>vue的 typescript 代码片段</p>
</blockquote>
<h3 id="Vue-2-Snippets"><a href="#Vue-2-Snippets" class="headerlink" title="Vue 2 Snippets"></a>Vue 2 Snippets</h3><blockquote>
<p>vue 2代码片段</p>
</blockquote>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="Dracula-Official"><a href="#Dracula-Official" class="headerlink" title="Dracula Official"></a>Dracula Official</h3><p>个人最喜欢的主题，应该是最好看的主题之一😀</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkzxpf6tevj30l206s74d.jpg" alt=""></p>
<h3 id="One-Dark-Pro"><a href="#One-Dark-Pro" class="headerlink" title="One Dark Pro"></a>One Dark Pro</h3><p>这个也好看😄</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkzy0i7rutj30py06yglq.jpg" alt=""></p>
<h3 id="Atom-One-Dark-Theme-老版本"><a href="#Atom-One-Dark-Theme-老版本" class="headerlink" title="Atom One Dark Theme(老版本)"></a>Atom One Dark Theme(老版本)</h3><p>这个和 One Dark Pro差不多，One Dark Pro颜色主题多一些</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkzxzhoqkrj30l6062jrl.jpg" alt=""></p>
<h3 id="One-Monokai-Theme"><a href="#One-Monokai-Theme" class="headerlink" title="One Monokai Theme"></a>One Monokai Theme</h3><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093223049049.jpg" alt=""></p>
<h3 id="Eva-Theme"><a href="#Eva-Theme" class="headerlink" title="Eva Theme"></a>Eva Theme</h3><p>里面包含黑色和白色主题，这个白色主题感觉挺好看的</p>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093223899355.jpg" alt=""></p>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093223624542.jpg" alt=""></p>
<h3 id="Boxy-Theme-Kit"><a href="#Boxy-Theme-Kit" class="headerlink" title="Boxy Theme Kit"></a>Boxy Theme Kit</h3><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15093265368328.jpg" alt=""></p>
<hr>
<p>大家还有什么好的插件推荐吗🤓</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>vue全家桶与typescript使用总结</title>
    <url>/vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B8%8Etypescript%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近重构了我之前项目 qq 音乐移动端，使用的技术是 vue，vuex，vue-router，和 typescript，在这期间，遇到的问题还是蛮多的，一会儿我会把我遇到的问题以及解决方法列出来，避免忘记。</p>
</blockquote>
<a id="more"></a>

<p>重构完成的项目 ===&gt; <a href="https://github.com/shenzekun/vue-qq-music" target="_blank" rel="noopener">vue-qq-music</a></p>
<p>TypeScript与Vue全家桶的配置可以参考以下两篇文章（在这里由衷感谢两位作者）：</p>
<ol>
<li><p><a href="https://segmentfault.com/a/1190000011744210#articleHeader12" target="_blank" rel="noopener">vue + typescript 新项目起手式</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000011864013" target="_blank" rel="noopener">Vue2.5+ Typescript 引入全面指南 - Vuex篇</a></p>
</li>
</ol>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>为什么我要将<code>TypeScript</code> 和 <code>Vue</code> 集成呢？因为TypeScript 有以下几个优势：</p>
<ul>
<li><strong>可读性</strong>。TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如interface等。这样会大大提升代码的可阅读性</li>
<li><strong>静态类型检查</strong>。静态类型检查可以避免很多不必要的错误，不用在调试的时候才发现问题。</li>
<li><strong>代码提示</strong>。ts 搭配 vscode，代码提示非常友好</li>
<li><strong>代码重构</strong>。例如全项目更改某个变量名（也可以是类名、方法名，甚至是文件名[重命名文件自动修改的是整个项目的import]），在JS中是不可能的，而TS可以轻松做到。看看下面发生了什么神奇的事情😁⬇️<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-03-01-ts-chonggou.gif" alt=""></li>
</ul>
<h2 id="遇到的问题以及解决方法"><a href="#遇到的问题以及解决方法" class="headerlink" title="遇到的问题以及解决方法"></a>遇到的问题以及解决方法</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>ts 无法识别$ref</p>
<p><strong>解决方法</strong><br>① 直接在 this.$refs.xxx 后面申明类型如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.lyricsLines <span class="keyword">as</span> HTMLDivElement;</span><br></pre></td></tr></table></figure>
<p>② 在<code>export default class xxx extends Vue</code>里面声明全部的$ref 的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$refs: &#123;</span><br><span class="line">    audio: HTMLAudioElement,</span><br><span class="line">    lyricsLines: HTMLDivElement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>ts 无法识别 require</p>
<p><strong>解决方法</strong></p>
<p>安装声明文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @types/webpack-env -D</span><br></pre></td></tr></table></figure>


<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p>运行<code>npm run build</code> 出现<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-03-01-044916.png" alt=""></p>
<p><strong>解决方法</strong></p>
<blockquote>
<p>You can fix this by <strong>using the most recent beta version</strong> of <code>uglifyjs-webpack-plugin</code>. Our team is working to remove completely the UglifyJsPlugin from within webpack, and instead have it as a standalone plugin.</p>
</blockquote>
<blockquote>
<p>If you do <code>yarn add uglifyjs-webpack-plugin@beta --dev</code> or <code>npm install uglifyjs-webpack-plugin@beta --save-dev</code>you should receive the latest beta which does successfully minify es6 syntax. We are hoping to have this released from beta extremely soon, however it should save you from errors for now!</p>
</blockquote>
<p>也就是说升级你的uglifyjs-webpack-plugin版本：<br><code>yarn add uglifyjs-webpack-plugin@beta --dev</code></p>
<h3 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h3><p><a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">vue-property-decorator</a> 装饰器写法不对。当时我是要把 mixins，注入到组件里，我就这样写：<br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-03-01-052833.png" alt=""><br>ts提示找不到 mixin。我就很纳闷为什么找不到名字，由于官网vue-property-decorator例子太少，只好一步一步摸索😂</p>
<p><strong>解决方法</strong></p>
<p>把mixins写在@Component里面…，像这样：</p>
<p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2018-03-01-053215.png" alt=""></p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li>如果你引用第三方无类型声明的库，那就需要自己编写x.d.ts文件</li>
<li>如果引用 ui 组件的时候，如果控制台出现<code>Property &#39;$xxx&#39; does not exist on type &#39;App&#39;</code>的话，那么可以在<code>vue-shim.d.ts</code>增加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare module &#39;vue&#x2F;types&#x2F;vue&#39; &#123;</span><br><span class="line">  interface Vue &#123;</span><br><span class="line">    $xxx: any,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>经过几天的折腾，终于把项目重构完成，我个人认为加上 <code>TypeScript</code>，确实效率挺高了许多，不过 <code>Vue+TypeScript</code> 还是没 <code>Angular</code>支持那么完善，相信之后 vue 对于 ts 的集成会更加完善！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习笔记之js中apply()和call()方法详解</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bjs%E4%B8%ADapply-%E5%92%8Ccall-%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.html</url>
    <content><![CDATA[<blockquote>
<p>经过网上的大量搜索，渐渐明白了apply()和call方法的使用，为此写一篇文章记录一下。</p>
</blockquote>
<a id="more"></a>

<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><ul>
<li><p><strong>apply()方法</strong>：</p>
<blockquote>
<p>Function.apply(obj,args)<br>obj：这个对象将代替Function类里this对象<br>args：这个是数组，它将作为参数传给Function(args–&gt;arguments）</p>
</blockquote>
</li>
<li><p><strong>call()方法</strong>：</p>
<blockquote>
<p>Function.call(obj,[param1[,param2[,…[,paramN]]]])<br>obj：这个对象将代替Function类里this对象<br>params：这个是一个参数列表</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="相同点与不同点"><a href="#相同点与不同点" class="headerlink" title="相同点与不同点"></a><strong>相同点与不同点</strong></h3><ol>
<li><p><strong>相同点</strong></p>
<p> 作用是一样的，call 和 apply 都是为了改变函数体内部 this 的指向，也就是把Function(即this)绑定到obj，这时候obj具备了Function的属性和方法，说白一点就是obj继承了Function的属性和方法。</p>
</li>
<li><p><strong>不同点</strong></p>
<p> 相信大家也已经发现了，他们唯一区别就是接受参数的方式不太一样，apply接受的是数组参数，call接受的是连续参数。</p>
</li>
</ol>
<hr>
<h3 id="方法使用"><a href="#方法使用" class="headerlink" title="方法使用"></a><strong>方法使用</strong></h3><p><strong>我们来看下面一个例子：</strong></p>
<p>定义一个函数mul</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function mul(a,b)&#123;</span><br><span class="line">	return this+(a*b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们在控制台上打印出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(mul.call(null,2,3));</span><br><span class="line">console.log(mul.call(&#39;s&#39;,2,3));</span><br><span class="line">console.log(mul.call(3,2,3));</span><br><span class="line">console.log(mul.apply(null,[2,5]));</span><br><span class="line">console.log(mul.apply(2,[2,5]));</span><br></pre></td></tr></table></figure>
<p>分别为：</p>
<blockquote>
<p>[object Window]6<br>s6<br>9<br>[object Window]10<br>12</p>
</blockquote>
<p>可能你会发现到，第一行 <strong>console.log(mul.call(null,2,3))</strong> 没什么变化，call()的第一个参数就是改变的 this 指向，如果为 null 则函数的 this 不变，注意，如果在严格模式下（函数体或全局的开头有这句话：’use strict’），this 会变成 null。如果函数本身有参数，则从 call 的第二个参数开始写起。<br>第二行 <strong>console.log(mul.call(‘s’,2,3))</strong> 将函数的 this 指向一个字符串 ‘s’.    ===&gt;&gt;  ‘s’+2 * 3=s6<br>第三行 <strong>console.log(mul.call(3,2,3))</strong>  将函数的this指向一个数字3<br>     ===&gt;&gt;   3+2 * 3=9<br>以此类推。</p>
<p><strong>再举一个例子</strong></p>
<p>学js的都知道 <strong>Math.max()</strong> 方法,比如有三个参数2,3,4那么我们要找出最大值可以这么写 <strong>Math.max(2,3,4)</strong> 那要是有 100 个或更多参数呢？这时候就可以结合 apply 和数组轻松实现了。</p>
<p>比如定义一个数组</p>
<blockquote>
<p>var arr=[2,3,4,5,6,7,8,9,10,23,45,66,22,11];</p>
</blockquote>
<p>接着我们打印出</p>
<blockquote>
<p>console.log(Math.max.apply(null,arr));</p>
</blockquote>
<p>这样一来就很简洁明了。</p>
<p><strong>再举一个例子实现对象继承</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person(name,age) &#123;</span><br><span class="line">	this.name&#x3D;name;</span><br><span class="line">	this.age&#x3D;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student&#x3D;function(name,age,gender) &#123;</span><br><span class="line">	Person.call(this,name,age);&#x2F;&#x2F;this继承了person的属性和方法</span><br><span class="line">	this.gender&#x3D;gender;</span><br><span class="line">&#125;</span><br><span class="line">var student&#x3D;new Student(&quot;陈安东&quot;, 20, &quot;男&quot;);</span><br><span class="line">alert(&quot;姓名:&quot;+student.name+&quot;\n&quot;+&quot;年龄:&quot;+student.age+&quot;\n&quot;+&quot;性别:&quot;+student.gender);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>姓名:陈安东<br>年龄:20<br>性别:男</p>
</blockquote>
<p>这样用call就实现了继承（用apply也类似）</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习笔记之观察者模式</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>观察者模式也称”发布-订阅”模式,它的作用就是当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，自动刷新对象状态</p>
</blockquote>
<a id="more"></a>
<p>举个生活比较常见常见的例子,比如你去面试之后，面试官看你表现不错，最后会跟你要联系方式，以便之后可以联系你。在这角色扮演当中，你就是“订阅者”，面试官就是“发布者”。</p>
<p>那么发布订阅模式是咋实现的呢？</p>
<p><strong>思路</strong></p>
<ol>
<li>给定一个发布者</li>
<li>面试者将联系方式给发布者</li>
<li>发布者的一个列表有各种职位(web端的，java 的)，里面记载回调函数以便通知这些面试者</li>
<li>最后发布消息的时候，会遍历这个列表的职位的回调函数，告诉面试者面试这个职位是通过还是不通过</li>
<li>如果面试者取消了订阅，那么将回调函数和之前的回调函数作对比，如果相等，就将这个面试者的上班通知去掉</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> events = &#123;&#125;; <span class="comment">//发布者</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//subscribe也就是订阅，post 代表面试者要面的职位，callback表示为回调函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">post, callback</span>) </span>&#123;</span><br><span class="line">    events[post] = events[post] || []; <span class="comment">//发布者的列表里有没有这个面试职位，如果没有就创建一个空数组</span></span><br><span class="line">    events[post].push(callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//publish 表示发布</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> post = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>); <span class="comment">//第一个参数指定“键”</span></span><br><span class="line">    <span class="keyword">var</span> fns = events[post]; <span class="comment">//设置缓存，提高性能</span></span><br><span class="line">    <span class="keyword">if</span> (!fns) &#123; <span class="comment">//如果发布者的列表里没有这个职位，那肯定是不能发布</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123; <span class="comment">//遍历当前的职位的数组里有几个面试者</span></span><br><span class="line">      fns[i].apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//unsubscribe 表示取消订阅</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params">post, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fns = events[post];</span><br><span class="line">    <span class="keyword">if</span> (fns) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = fns.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          <span class="keyword">if</span> (fns[i] === fn) fns.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果没有传入fn回调函数，直接取消post对应消息的所有订阅</span></span><br><span class="line">        fns = [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果发布者的列表没有这个职位，直接 return</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    subscribe: subscribe,</span><br><span class="line">    publish: publish,</span><br><span class="line">    unsubscribe: unsubscribe</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小明你通过了面试，上班时间："</span> + time);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小强你通过了面试，上班时间："</span> + time);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//小明将联系方式给了发布者，发布者（hr）觉得小明不错，可以通过，于是在列表(java)里写下了一些回调函数，到时候发布的时候将上班时间告诉小明</span></span><br><span class="line">Event.subscribe(<span class="string">"java"</span>, fn1);</span><br><span class="line"><span class="comment">//小强也订阅了</span></span><br><span class="line">Event.subscribe(<span class="string">"java"</span>, fn2);</span><br><span class="line"></span><br><span class="line">Event.publish(<span class="string">"java"</span>, <span class="string">"2017-10-01"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出:</span></span><br><span class="line"><span class="comment">小明你通过了面试，上班时间：2017-10-01</span></span><br><span class="line"><span class="comment">小强你通过了面试，上班时间：2017-10-01</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Event.unsubscribe(<span class="string">"java"</span>, fn1);<span class="comment">//删除小明的上班通知</span></span><br><span class="line">Event.publish(<span class="string">"java"</span>, <span class="string">"2017-10-01"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">小强你通过了面试，上班时间：2017-10-01</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>






<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="noopener">Javascript异步编程的4种方法</a><br><a href="https://segmentfault.com/a/1190000007248460" target="_blank" rel="noopener">js设计模式笔记 - 观察者模式</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端小项目之在线便利贴</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%B0%8F%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%9C%A8%E7%BA%BF%E4%BE%BF%E5%88%A9%E8%B4%B4.html</url>
    <content><![CDATA[<hr>
<h2 id="实现的效果如下："><a href="#实现的效果如下：" class="headerlink" title="实现的效果如下："></a>实现的效果如下：</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjhulxqhxuj31kw0j976o.jpg" alt=""></p>
<p>界面可能不是太好看😁，考虑到容器的高度会被拉长，因此没有用图片做背景。</p>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><a href="http://note.shenzekun.cn" target="_blank" rel="noopener">便利贴</a></p>
<a id="more"></a>

<h2 id="涉及的知识点"><a href="#涉及的知识点" class="headerlink" title="涉及的知识点"></a>涉及的知识点</h2><ul>
<li><code>sass</code>(css 预编译器)</li>
<li><code>webpack</code>（自动化构建工具，实现LESS,CSS,JS编译和压缩代码）</li>
<li><code>express</code> (基于 Node.js 平台的 web 开发框架)</li>
<li><code>html+css</code></li>
<li><code>Node.js</code>(基于 Chrome V8 引擎的 JavaScript 运行环境)</li>
<li><code>jQuery</code>(一个快速、简洁的JavaScript框架)</li>
<li><code>sequelize</code>(Node的ORM框架Sequelize操作数据库)</li>
<li><code>passport</code>(实现第三方登录)</li>
</ul>
<h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ul>
<li>github第三方登录</li>
<li>添加笔记（登录成功后）</li>
<li>删除笔记</li>
<li>修改笔记</li>
<li>使用 markdown(类似 typroa)</li>
<li>笔记拖拽</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><strong>必要条件</strong>：已经安装好了node环境,还没安装的可以去<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node</a>中文官网下载</li>
<li><strong>小提示</strong>：如果用 npm 下载感觉慢的话，可以下载一个切换镜像源的工具<code>nrm</code>,在终端输入：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i nrm -g</span><br></pre></td></tr></table></figure>
<p>然后如下操作：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fjhuypg0s6j31co0v6439.jpg" alt=""></p>
<p>   <strong>开始！！</strong></p>
<p>1.<strong>新建一个文件夹，名字自己起，打开终端，切换到自己新建文件夹，如</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd (文件夹名称)</span><br></pre></td></tr></table></figure>

<p>2.<strong>生成 <code>package.json</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>3.<strong>安装 express</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i express --save</span><br></pre></td></tr></table></figure>

<p>4.<strong>安装 <a href="http://www.expressjs.com.cn/starter/generator.html" target="_blank" rel="noopener">express生成器</a>:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express-generator --save</span><br></pre></td></tr></table></figure>

<p>5.<strong>生成 ejs 模板（类似 jsp 的写法）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">express -f -e</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjhv8g9apcj30au0cqq30.jpg" alt=""></p>
<p>其中<code>public</code>用来存放编译后的js文件以及编译好的css文件等，<code>routes</code>用来存放处理 ajax 的请求文件，views就是存放视图文件<br>然后新建 database 和 src：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fji1acleqhj30ba0k0mxg.jpg" alt=""></p>
<p>其中 src/js 里面 app 代表不同页面的入口文件，lib 就是一些常用的库，mod 就是你写的一些模块，database 用来存放数据库数据的</p>
<p>6.<strong>输入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>如果有出现下面的错误：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjhvfxr6p3j319i0qq42h.jpg" alt=""></p>
<p>出现这个错误是因为你没有下载模块，只需在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i (模块名) --save</span><br></pre></td></tr></table></figure>

<p>就可以了    </p>
<p>7.<strong>打开浏览器，输入<code>localhost:3000</code></strong><br>出现下面这样就说明成功了：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fjhvj4lwtgj316a0cgjrb.jpg" alt=""></p>
<p>8.<strong>接下来安装webpack和相关依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack --save-dev</span><br><span class="line">npm i --save css-loader style-loader express-session express-flash node-sass passport sass sass-loader sequelize sqlite3 extract-text-webpack-plugin onchange</span><br></pre></td></tr></table></figure>

<p>9.<strong>在 src 里建一个 webpack.config.js，配置如下</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">var ExtractTextPlugin &#x3D; require(&#39;extract-text-webpack-plugin&#39;)</span><br><span class="line">var autoprefixer &#x3D; require(&#39;autoprefixer&#39;);</span><br><span class="line">    </span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: path.join(__dirname, &quot;js&#x2F;app&#x2F;index&quot;),</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, &quot;..&#x2F;public&quot;),</span><br><span class="line">        filename: &quot;js&#x2F;index.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: &#x2F;(\.scss)$&#x2F;,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                fallback: &quot;style-loader&quot;,</span><br><span class="line">                use: [&quot;css-loader&quot;, &quot;sass-loader&quot;]</span><br><span class="line">            &#125;) &#x2F;&#x2F;把 css 抽离出来生成一个文件</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            jquery: path.join(__dirname, &quot;js&#x2F;lib&#x2F;jquery-2.0.3.min.js&quot;),</span><br><span class="line">            mod: path.join(__dirname, &quot;js&#x2F;mod&quot;),</span><br><span class="line">            sass: path.join(__dirname, &quot;sass&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.ProvidePlugin(&#123;</span><br><span class="line">            $: &quot;jquery&quot;</span><br><span class="line">        &#125;),</span><br><span class="line">        new ExtractTextPlugin(&quot;css&#x2F;index.css&quot;),</span><br><span class="line">        new webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                css: [</span><br><span class="line">                    autoprefixer(),</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">                warnings: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>说明</p>
<ul>
<li><p>entry:入口文件，也就是 src/js/app里面的index.js,其中__dirname是获得当前文件所在目录的完整目录名</p>
</li>
<li><p>output:输出编译后的文件 index.js，输出到 public/js 里面</p>
</li>
<li><p>module：配置Loaders，通过使用不同的loader，webpack有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件</p>
</li>
<li><p>resolve.alias：设置模块别名，便于我们更方便引用，比如说我在 js里面的文件需要 jquery，在里面的文件直接写 require(“jquery”) 就行了</p>
</li>
<li><p>如果所有文件都需要 jquery,那么直接在 plugins里面写成这样：</p>
<p> <img src="https://ws1.sinaimg.cn/large/006tKfTcly1fji3f1ap39j30ik03cglh.jpg" alt=""></p>
<p> 就不需要 require 了</p>
<p>  <img src="https://ws3.sinaimg.cn/large/006tKfTcly1fji3x6gw2oj30i005q748.jpg" alt=""><br>  这个是压缩文件的</p>
</li>
</ul>
<p>10.<strong>在 package.json 中，增加如下两条：</strong><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fji3q8xe7tj310i068js2.jpg" alt=""></p>
<p>写成这样，你在终端就可以写成<code>npm run webpack</code> 来编译文件，<br><code>npm run watch</code>来监控 src 里面的 js 和 scss 的变化，只要一修改，进行编译，提高了效率</p>
<p>11.<strong>测试</strong></p>
<p>你可以试试在 js 里面的 index.js写点东西，然后 npm run webpack，如果终端显示是这样：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fji43t9rgej31b20ug0y0.jpg" alt=""></p>
<p>就证明成功了</p>
<h2 id="项目思路"><a href="#项目思路" class="headerlink" title="项目思路"></a>项目思路</h2><p>逻辑比较简单</p>
<ol>
<li>首先用户必须登录才能添加笔记，当用户失焦的时候，将数据插入数据库，并且重新布局（瀑布流）</li>
<li>用户不能更改其他用户的笔记，除了管理员😄</li>
<li>用户更新笔记之后，数据库的数据重新更新，重新布局</li>
<li>用户可以删除笔记，数据从数据库中删除，重新布局</li>
<li>用户可以拖拽笔记，但不将位置存入数据库</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>html,css就不讲了，可以看看我的<a href="https://github.com/shenzekun/sticky-note" target="_blank" rel="noopener">源码</a>,主要讲 js。</p>
<p>1.<strong>瀑布流的实现</strong></p>
<p>思路：（前提是必须绝对定位）</p>
<blockquote>
<ol>
<li>获取元素的宽度</li>
<li>通过窗口的宽度除以元素的宽度来获取列数</li>
<li>初始化一个数组来获取每列的高度，初始化每列的高度为0</li>
<li>遍历元素，获取最小的的列数的高度和索引，对当前元素进行定位，列数高度加等于当前元素的高度</li>
</ol>
</blockquote>
<p>知道思路后，代码很快就写出来了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var WaterFall &#x3D; (function () &#123;</span><br><span class="line">        var $ct, $items;</span><br><span class="line">        function render($c) &#123;</span><br><span class="line">            $ct &#x3D; $c;</span><br><span class="line">            $items &#x3D; $ct.children();</span><br><span class="line">            var nodeWidth &#x3D; $items.outerWidth(true),</span><br><span class="line">                windowHeight &#x3D; $(window).height(),</span><br><span class="line">                colNum &#x3D; parseInt($(window).width() &#x2F; nodeWidth), &#x2F;&#x2F;获取列数</span><br><span class="line">                colSumHeight &#x3D; []; &#x2F;&#x2F;获取每列的高度</span><br><span class="line">            &#x2F;&#x2F;对每列的高度进行初始化</span><br><span class="line">            for (var i &#x3D; 0; i &lt; colNum; i++) &#123;</span><br><span class="line">                colSumHeight[i] &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">            $items.each(function () &#123;</span><br><span class="line">                var $current &#x3D; $(this);</span><br><span class="line">                var index &#x3D; 0,</span><br><span class="line">                    minSumHeight &#x3D; colSumHeight[0];</span><br><span class="line">                &#x2F;&#x2F;获取最小的的列数的高度和索引</span><br><span class="line">                for (var i &#x3D; 0; i &lt; colSumHeight.length; i++) &#123;</span><br><span class="line">                    if (minSumHeight &gt; colSumHeight[i]) &#123;</span><br><span class="line">                        index &#x3D; i;</span><br><span class="line">                        minSumHeight &#x3D; colSumHeight[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;            </span><br><span class="line">                &#x2F;&#x2F;改变窗口高度</span><br><span class="line">                if (windowHeight &lt; minSumHeight) &#123;</span><br><span class="line">                    $(&quot;body&quot;).height(minSumHeight);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $(&quot;body&quot;).height(windowHeight - 72);</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;对当前元素进行定位</span><br><span class="line">                $current.animate(&#123;</span><br><span class="line">                    left: nodeWidth * index,</span><br><span class="line">                    top: minSumHeight</span><br><span class="line">                &#125;, 5);</span><br><span class="line">                colSumHeight[index] +&#x3D; $current.outerHeight(true);</span><br><span class="line">    </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;当窗口发生变化时，重新渲染</span><br><span class="line">        $(window).on(&#39;resize&#39;, function () &#123;</span><br><span class="line">            render($ct);</span><br><span class="line">        &#125;);</span><br><span class="line">        return &#123;</span><br><span class="line">            init: render</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure>

<p>2.<strong>笔记的拖拽</strong></p>
<p>我们先看个图</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fji626ceeuj30r40p8t96.jpg" alt=""></p>
<p>因此代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;设置笔记的移动</span><br><span class="line">      $noteHead.on(&#39;mousedown&#39;, function (e) &#123;</span><br><span class="line">          var evtX &#x3D; e.pageX - $note.offset().left, &#x2F;&#x2F;evtX 计算事件的触发点在 dialog内部到 dialog 的左边缘的距离</span><br><span class="line">              evtY &#x3D; e.pageY - $note.offset().top;</span><br><span class="line">          $note.addClass(&#39;draggable&#39;).data(&#39;evtPos&#39;, &#123;</span><br><span class="line">              x: evtX,</span><br><span class="line">              y: evtY</span><br><span class="line">          &#125;); &#x2F;&#x2F;把事件到 dialog 边缘的距离保存下来</span><br><span class="line">      &#125;).on(&#39;mouseup&#39;, function () &#123;</span><br><span class="line">          $note.removeClass(&#39;draggable&#39;).removeData(&#39;pos&#39;);</span><br><span class="line">      &#125;);</span><br><span class="line">    </span><br><span class="line">      $(&#39;body&#39;).on(&#39;mousemove&#39;, function (e) &#123;</span><br><span class="line">          $(&#39;.draggable&#39;).length &amp;&amp; $(&#39;.draggable&#39;).offset(&#123;</span><br><span class="line">              top: e.pageY - $(&#39;.draggable&#39;).data(&#39;evtPos&#39;).y, &#x2F;&#x2F; 当用户鼠标移动时，根据鼠标的位置和前面保存的距离，计算 dialog 的绝对位置</span><br><span class="line">              left: e.pageX - $(&#39;.draggable&#39;).data(&#39;evtPos&#39;).x</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>3.<strong>提示模块</strong></p>
<p>这个比较容易：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">提示模块</span><br><span class="line">参数：状态(1表示成功，0表示失败)，消息，出现时间(不写默认是1s)</span><br><span class="line"> *&#x2F;</span><br><span class="line">function toast(status, msg, time) &#123;</span><br><span class="line">    this.status &#x3D; status;</span><br><span class="line">    this.msg &#x3D; msg;</span><br><span class="line">    this.time &#x3D; time || 1000;</span><br><span class="line">    this.createToast();</span><br><span class="line">    this.showToast();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toast.prototype &#x3D; &#123;</span><br><span class="line">    createToast: function () &#123;</span><br><span class="line">        if (this.status &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            var html &#x3D; &#39;&lt;div class&#x3D;&quot;toast&quot;&gt;&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;imgs&#x2F;1.png&quot; class&#x3D;&quot;toast_icon&quot;&gt;&lt;&#x2F;img&gt;&lt;span class&#x3D;&quot;toast_word&quot;&gt;&#39; + this.msg + &#39;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">            this.$toast &#x3D; $(html);</span><br><span class="line">            $(&#39;body&#39;).append(this.$toast);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var html &#x3D; &#39;&lt;div class&#x3D;&quot;toast&quot;&gt;&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;imgs&#x2F;0.png&quot; class&#x3D;&quot;toast_icon&quot;&gt;&lt;&#x2F;img&gt;&lt;span class&#x3D;&quot;toast_word&quot;&gt;&#39; + this.msg + &#39;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">            this.$toast &#x3D; $(html);</span><br><span class="line">            $(&#39;body&#39;).append(this.$toast);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showToast: function () &#123;</span><br><span class="line">        var _this &#x3D; this;</span><br><span class="line">        this.$toast.fadeIn(300, function () &#123;</span><br><span class="line">            setTimeout(function () &#123;</span><br><span class="line">                _this.$toast.fadeOut(300, function () &#123;</span><br><span class="line">                    _this.$toast.remove();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, _this.time);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Toast(status, msg, time) &#123;</span><br><span class="line">    return new toast(status, msg, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.<strong>笔记模块</strong></p>
<p>思路：</p>
<blockquote>
<ol>
<li>初始化（如 id，username 等等）</li>
<li>创建节点</li>
<li>设置颜色</li>
<li>绑定事件</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Note(opts) &#123;</span><br><span class="line">    this.initOpts(opts);</span><br><span class="line">    this.createNode();</span><br><span class="line">    this.setColor();</span><br><span class="line">    this.bind();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Note.prototype &#x3D; &#123;</span><br><span class="line">    colors: [</span><br><span class="line">        [&#39;#ea9b35&#39;, &#39;#efb04e&#39;], &#x2F;&#x2F; headColor, containerColor</span><br><span class="line">        [&#39;#dd598b&#39;, &#39;#e672a2&#39;],</span><br><span class="line">        [&#39;#c24226&#39;, &#39;#d15a39&#39;],</span><br><span class="line">        [&#39;#c1c341&#39;, &#39;#d0d25c&#39;],</span><br><span class="line">        [&#39;#3f78c3&#39;, &#39;#5591d2&#39;]</span><br><span class="line">    ],</span><br><span class="line">    defaultOpts: &#123;</span><br><span class="line">        id: &#39;&#39;, &#x2F;&#x2F;Note的 id</span><br><span class="line">        $ct: $(&#39;#content&#39;).length &gt; 0 ? $(&#39;#content&#39;) : $(&#39;body&#39;), &#x2F;&#x2F;默认存放 Note 的容器</span><br><span class="line">        context: &#39;请输入内容&#39;, &#x2F;&#x2F;Note 的内容</span><br><span class="line">        createTime: new Date().toLocaleDateString().replace(&#x2F;\&#x2F;&#x2F;g, &#39;-&#39;).match(&#x2F;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;&#x2F;),</span><br><span class="line">        username: &#39;admin&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    initOpts: function (opts) &#123;</span><br><span class="line">        this.opts &#x3D; $.extend(&#123;&#125;, this.defaultOpts, opts || &#123;&#125;);</span><br><span class="line">        if (this.opts.id) &#123;</span><br><span class="line">            this.id &#x3D; this.opts.id;</span><br><span class="line">        &#125;</span><br><span class="line">        this.createTime &#x3D; this.opts.createTime ? this.opts.createTime : new Date().toLocaleDateString().replace(&#x2F;\&#x2F;&#x2F;g, &#39;-&#39;).match(&#x2F;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;&#x2F;);</span><br><span class="line">        this.username &#x3D; this.opts.username ? this.opts.username : &#39;admin&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    createNode: function () &#123;</span><br><span class="line">        var tpl &#x3D; &#39;&lt;div class&#x3D;&quot;note&quot;&gt;&#39; +</span><br><span class="line">            &#39;&lt;div class&#x3D;&quot;note-head&quot;&gt;&lt;span class&#x3D;&quot;delete&quot;&gt;&amp;times;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39; +</span><br><span class="line">            &#39;&lt;div class&#x3D;&quot;note-ct&quot; contenteditable&#x3D;&quot;true&quot;&gt;&lt;&#x2F;div&gt;&#39; +</span><br><span class="line">            &#39;&lt;div class&#x3D;&quot;note-info&quot;&gt;&lt;div class&#x3D;&quot;note-name&quot;&gt;&#39; + this.username + &#39;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;note-time&quot;&gt;&#39; + this.createTime + &#39;&lt;&#x2F;div&gt;&#39; +</span><br><span class="line">            &#39;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">        this.$note &#x3D; $(tpl);</span><br><span class="line">        this.$note.find(&#39;.note-ct&#39;).html(this.opts.context);</span><br><span class="line">        this.opts.$ct.append(this.$note);</span><br><span class="line">        &#x2F;&#x2F;if (!this.id) this.$note.css(&#39;bottom&#39;, &#39;10px&#39;); &#x2F;&#x2F;新增放到右边</span><br><span class="line">        Event.fire(&#39;waterfall&#39;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    setColor: function () &#123;</span><br><span class="line">        var color &#x3D; this.colors[Math.floor(Math.random() * 5)];</span><br><span class="line">        this.$note.find(&quot;.note-head&quot;).css(&#39;background-color&#39;, color[0]);</span><br><span class="line">        this.$note.find(&#39;.note-ct&#39;).css(&#39;background-color&#39;, color[1]);</span><br><span class="line">        this.$note.find(&#39;.note-info&#39;).css(&#39;background-color&#39;, color[1]);</span><br><span class="line">    &#125;,</span><br><span class="line">    setLayout: function () &#123;</span><br><span class="line">        var self &#x3D; this;</span><br><span class="line">        if (self.clock) &#123;</span><br><span class="line">            clearTimeout(self.clock);</span><br><span class="line">        &#125;</span><br><span class="line">        self.clock &#x3D; setTimeout(function () &#123;</span><br><span class="line">            Event.fire(&#39;waterfall&#39;);</span><br><span class="line">        &#125;, 100);</span><br><span class="line">    &#125;,</span><br><span class="line">    bind: function () &#123;</span><br><span class="line">        var _this &#x3D; this, &#x2F;&#x2F;记录下坑，之前末尾是分号不是逗号后面都变成了全局变量结果造成了最后一个才能修改😂</span><br><span class="line">            $note &#x3D; this.$note,</span><br><span class="line">            $noteHead &#x3D; $note.find(&#39;.note-head&#39;),</span><br><span class="line">            $noteCt &#x3D; $note.find(&#39;.note-ct&#39;),</span><br><span class="line">            $close &#x3D; $note.find(&#39;.delete&#39;);</span><br><span class="line"></span><br><span class="line">        $close.on(&#39;click&#39;, function () &#123;</span><br><span class="line">            _this.delete();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $noteCt.on(&#39;focus&#39;, function () &#123;</span><br><span class="line">            if ($noteCt.html() &#x3D;&#x3D;&#x3D; &#39;请输入内容&#39;) $noteCt.html(&#39;&#39;);</span><br><span class="line">            $noteCt.data(&#39;before&#39;, $noteCt.html());</span><br><span class="line">        &#125;).on(&#39;blur paste&#39;, function () &#123;</span><br><span class="line">            if ($noteCt.data(&#39;before&#39;) !&#x3D; $noteCt.html()) &#123;</span><br><span class="line">                $noteCt.data(&#39;before&#39;, $noteCt.html());</span><br><span class="line">                _this.setLayout();</span><br><span class="line">                if (_this.id) &#123; &#x2F;&#x2F;判断是否有这个id，如果有就更新，如果没有就添加</span><br><span class="line">                    _this.edit($noteCt.html())</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    _this.add($noteCt.html())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;设置笔记的移动</span><br><span class="line">        $noteHead.on(&#39;mousedown&#39;, function (e) &#123;</span><br><span class="line">            var evtX &#x3D; e.pageX - $note.offset().left, &#x2F;&#x2F;evtX 计算事件的触发点在 dialog内部到 dialog 的左边缘的距离</span><br><span class="line">                evtY &#x3D; e.pageY - $note.offset().top;</span><br><span class="line">            $note.addClass(&#39;draggable&#39;).data(&#39;evtPos&#39;, &#123;</span><br><span class="line">                x: evtX,</span><br><span class="line">                y: evtY</span><br><span class="line">            &#125;); &#x2F;&#x2F;把事件到 dialog 边缘的距离保存下来</span><br><span class="line">        &#125;).on(&#39;mouseup&#39;, function () &#123;</span><br><span class="line">            $note.removeClass(&#39;draggable&#39;).removeData(&#39;pos&#39;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(&#39;body&#39;).on(&#39;mousemove&#39;, function (e) &#123;</span><br><span class="line">            $(&#39;.draggable&#39;).length &amp;&amp; $(&#39;.draggable&#39;).offset(&#123;</span><br><span class="line">                top: e.pageY - $(&#39;.draggable&#39;).data(&#39;evtPos&#39;).y, &#x2F;&#x2F; 当用户鼠标移动时，根据鼠标的位置和前面保存的距离，计算 dialog 的绝对位置</span><br><span class="line">                left: e.pageX - $(&#39;.draggable&#39;).data(&#39;evtPos&#39;).x</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;* 添加笔记到数据库 *&#x2F;</span><br><span class="line">    add: function (msg) &#123;</span><br><span class="line">        var _this &#x3D; this;</span><br><span class="line">        $.post(&#39;&#x2F;api&#x2F;notes&#x2F;add&#39;, &#123;</span><br><span class="line">            note: msg</span><br><span class="line">        &#125;).done(function (res) &#123;</span><br><span class="line">            if (res.status &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                _this.id &#x3D; res.id;</span><br><span class="line">                Toast(1, &#39;添加成功！&#39;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                _this.$note.remove();</span><br><span class="line">                Event.fire(&#39;waterfall&#39;);</span><br><span class="line">                Toast(0, res.errorMsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;* 编辑笔记数据库 *&#x2F;</span><br><span class="line">    edit: function (msg) &#123;</span><br><span class="line">        var _this &#x3D; this;</span><br><span class="line">        $.post(&#39;&#x2F;api&#x2F;notes&#x2F;edit&#39;, &#123;</span><br><span class="line">            id: this.id,</span><br><span class="line">            note: msg</span><br><span class="line">        &#125;).done(function (res) &#123;</span><br><span class="line">            if (res.status &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                Toast(1, &#39;更新成功！&#39;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast(0, res.errorMsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;* 删除笔记 *&#x2F;</span><br><span class="line">    delete: function () &#123;</span><br><span class="line">        var _this &#x3D; this;</span><br><span class="line">        if (confirm(&quot;确认要删除吗？&quot;)) &#123;</span><br><span class="line">            $.post(&#39;&#x2F;api&#x2F;notes&#x2F;delete&#39;, &#123;</span><br><span class="line">                id: this.id</span><br><span class="line">            &#125;).done(function (res) &#123;</span><br><span class="line">                if (res.status &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                    Toast(1, &#39;删除成功！&#39;);</span><br><span class="line">                    _this.$note.remove();</span><br><span class="line">                    Event.fire(&#39;waterfall&#39;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    Toast(0, res.errorMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.<strong>笔记管理模块</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var NoteManager &#x3D; (function () &#123;</span><br><span class="line">    &#x2F;&#x2F;页面加载</span><br><span class="line">    function load() &#123;</span><br><span class="line">        $.get(&#39;api&#x2F;notes&#39;).done(function (res) &#123;</span><br><span class="line">            if (res.status &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                $.each(res.data, function (index, msg) &#123;</span><br><span class="line">                    new Note(&#123;</span><br><span class="line">                        id: msg.id,</span><br><span class="line">                        context: msg.text,</span><br><span class="line">                        createTime: msg.createdAt.match(&#x2F;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;&#x2F;),</span><br><span class="line">                        username: msg.username</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                Event.fire(&#39;waterfall&#39;);</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast(0, res.errorMsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).fail(function () &#123;</span><br><span class="line">            Toast(0, &quot;网络异常&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 添加笔记 *&#x2F;</span><br><span class="line">    function add() &#123;</span><br><span class="line">        $.get(&#39;&#x2F;login&#39;).then(function (res) &#123;&#x2F;&#x2F;判断是否登录</span><br><span class="line">            if (res.status &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                new Note(&#123;</span><br><span class="line">                    username: res.username</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast(0, res.errorMsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">        load: load,</span><br><span class="line">        add: add</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>6.<strong>发布订阅模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 发布订阅模式 *&#x2F;</span><br><span class="line">var Event &#x3D; (function () &#123;</span><br><span class="line">    var events &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    function on(evt, handler) &#123;</span><br><span class="line">        events[evt] &#x3D; events[evt] || [];</span><br><span class="line">        events[evt].push(&#123;</span><br><span class="line">            handler: handler</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function fire(evt, args) &#123;</span><br><span class="line">        if (!events[evt]) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; events[evt].length; i++) &#123;</span><br><span class="line">            events[evt][i].handler(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function off(name) &#123;</span><br><span class="line">        delete events[name];</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">        on: on,</span><br><span class="line">        fire: fire,</span><br><span class="line">        off: off</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>写完模块后，写入口文件index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&#39;sass&#x2F;index.scss&#39;);</span><br><span class="line">var Toast &#x3D; require(&#39;mod&#x2F;toast.js&#39;).Toast;</span><br><span class="line">var WaterFall &#x3D; require(&#39;mod&#x2F;waterfall.js&#39;);</span><br><span class="line">var NoteManager &#x3D; require(&#39;mod&#x2F;note-manager&#39;);</span><br><span class="line">var Event &#x3D; require(&#39;mod&#x2F;event.js&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NoteManager.load();</span><br><span class="line">$(&#39;.add-note&#39;).on(&#39;click&#39;, function () &#123;</span><br><span class="line">    NoteManager.add();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Event.on(&#39;waterfall&#39;, function () &#123;</span><br><span class="line">    WaterFall.init($(&quot;#content&quot;));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>到这就差不多完成了70%了，接下来就创建数据库，连接数据库了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*创建数据库 运行 node note.js*&#x2F;</span><br><span class="line"></span><br><span class="line">var Sequelize &#x3D; require(&#39;sequelize&#39;);</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">var sequelize &#x3D; new Sequelize(undefined, undefined, undefined, &#123;</span><br><span class="line">    host: &#39;localhost&#39;,</span><br><span class="line">    dialect: &#39;sqlite&#39;,</span><br><span class="line">    &#x2F;&#x2F; SQLite only</span><br><span class="line">    storage: path.join(__dirname, &#39;..&#x2F;database&#x2F;database.sqlite&#39;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;* 测试连接是否成功</span><br><span class="line">node note.js</span><br><span class="line"></span><br><span class="line">sequelize.authenticate()</span><br><span class="line">    .then(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;Connection has been established successfully.&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err &#x3D;&gt; &#123;</span><br><span class="line">        console.error(&#39;Unable to connect to the database:&#39;, err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var Note &#x3D; sequelize.define(&#39;note&#39;, &#123;</span><br><span class="line">    text: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">    &#125;,</span><br><span class="line">    userid: &#123;</span><br><span class="line">        type: Sequelize.INTEGER</span><br><span class="line">    &#125;,</span><br><span class="line">    username: &#123;</span><br><span class="line">        type: Sequelize.STRING</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Note.sync();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">删除表</span><br><span class="line">Note.drop();</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">&#x2F;&#x2F;创建数据库</span><br><span class="line"></span><br><span class="line">Note.sync().then(function()&#123;</span><br><span class="line">     Note.create(&#123;text:&quot;sdsdsdsd&quot;&#125;);</span><br><span class="line">&#125;).then(function()&#123;</span><br><span class="line">    &#x2F;&#x2F;查询表</span><br><span class="line">    Note.findAll(&#123;raw:true&#125;).then(function(notes)&#123;</span><br><span class="line">        console.log(notes);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports &#x3D; Note;</span><br></pre></td></tr></table></figure>

<p>然后是在routes 里处理 ajax 请求，处理登录信息，获取 id，用户名等等，到这就基本完成了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过一星期的开发，了解了前后端联调，模块化开发方式、webpack 及loader和插件的使用、npm 的使用，Express的使用、路由、中间件、sqlite3、nodejs，在开发过程中还是有遇到许多问题，例如在连续声明变量的时候，不小心把逗号写成了分号，其他变量就变成了全局变量，于是就出错了，查了好久😂<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fji7u6i1v0j30jm06y0t6.jpg" alt=""><br>不过在这过程之中还是学到了许多，重要的是过程，继续往前端的路走下去😄</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>前端小项目：使用canvas绘画哆啦A梦</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%BD%BF%E7%94%A8canvas%E7%BB%98%E7%94%BB%E5%93%86%E5%95%A6A%E6%A2%A6.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>最近在学canvas元素,<code>&lt;canvas&gt;</code>标签只是图形容器，必须使用js来绘制图形。为了增强对canvas元素的理解,于是用canvas画了一个哆啦A梦来</p>
</blockquote>
<a id="more"></a>

<p><strong>要实现的效果图</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-24ab4e6cda048199.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="哆啦A梦"></p>
<blockquote>
<p><a href="https://shenzekun.github.io/doraemon/Doraemon.html" target="_blank" rel="noopener">在线预览</a></p>
</blockquote>
<p>要想绘画出这个哆啦a梦首先要掌握以下一些函数：</p>
<ul>
<li><a href="http://www.365mini.com/page/html5-canvas-arcto.htm" target="_blank" rel="noopener">arcTo()</a></li>
<li><a href="http://www.365mini.com/page/html5-canvas-circle.htm" target="_blank" rel="noopener">canvas绘制圆形或弧线</a></li>
<li><a href="http://www.w3school.com.cn/tags/canvas_beziercurveto.asp" target="_blank" rel="noopener">bezierCurveTo()</a></li>
<li><a href="http://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp" target="_blank" rel="noopener">quadraticCurveTo() </a></li>
</ul>
<p>开始绘画！！</p>
<p>首先我们需要创建一个400*600的画布，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;canvas id&#x3D;&quot;doraemon&quot; width&#x3D;&quot;400&quot; height&#x3D;&quot;600&quot;&gt;&lt;&#x2F;canvas&gt;</span><br></pre></td></tr></table></figure>
<p>接着定义一个div，用来显示坐标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;put&quot; style&#x3D;&quot;width: 50px&quot; height&#x3D;&quot;20px&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>接着我写了一个显示坐标的函数，可以用来看大概画到哪个点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function zuobiao(event) &#123;</span><br><span class="line">        var x &#x3D; event.clientX;</span><br><span class="line">        var y &#x3D; event.clientY;</span><br><span class="line">        var out &#x3D; document.getElementById(&quot;put&quot;);</span><br><span class="line">        out.innerHTML &#x3D; &quot;x:&quot; + x + &quot; y:&quot; + y;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>然后getContext() 方法返回一个用于在画布上绘图的环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cxt &#x3D; document.getElementById(&#39;doraemon&#39;).getContext(&#39;2d&#39;);</span><br></pre></td></tr></table></figure>
<p>接着开始画头部:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();&#x2F;&#x2F;起始路径</span><br><span class="line">cxt.lineWidth &#x3D; 1;&#x2F;&#x2F;线宽度为1</span><br><span class="line">cxt.strokeStyle &#x3D; &#39;#000&#39;;&#x2F;&#x2F;笔触的颜色</span><br><span class="line">cxt.arc(200, 175, 175, 0.7 * Math.PI, 0.3 * Math.PI);&#x2F;&#x2F;绘制弧，中心点（200，175），半径175</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#0bb0da&#39;;&#x2F;&#x2F;设置填充时的颜色</span><br><span class="line">cxt.fill();&#x2F;&#x2F;填充颜色</span><br><span class="line">cxt.stroke();&#x2F;&#x2F;绘制路径</span><br></pre></td></tr></table></figure>
<p>头部如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-14f0c90711c3b8d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="头部"></p>
<p>接着绘画出脸部：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#fff&#39;;</span><br><span class="line">cxt.moveTo(110, 110);&#x2F;&#x2F;将路径移到点（110，110），不创建线条</span><br><span class="line">cxt.quadraticCurveTo(-10, 200, 120, 315);&#x2F;&#x2F;创建二次贝塞尔曲线,控制点(-10,200),结束点(120,315)</span><br><span class="line">cxt.lineTo(280, 315);&#x2F;&#x2F;添加一个新点，然后在画布中创建从（110，110）到（280，315）的线条</span><br><span class="line">cxt.quadraticCurveTo(410, 210, 290, 110);</span><br><span class="line">cxt.lineTo(110, 110);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>脸部如下：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-3b275a0c5b472130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="脸部"></p>
<p>接着绘画眼睛：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();</span><br><span class="line">cxt.lineWidth &#x3D; 1;</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#fff&#39;;</span><br><span class="line">cxt.moveTo(110, 110);</span><br><span class="line">cxt.bezierCurveTo(110, 25, 200, 25, 200, 100);&#x2F;&#x2F;创建三次贝塞尔曲线,控制点1(110,25),控制点2(200,25),结束点(200,100)，也就是画左上半椭圆</span><br><span class="line">cxt.bezierCurveTo(200, 175, 110, 175, 110, 100);&#x2F;&#x2F;画左下半椭圆</span><br><span class="line">cxt.moveTo(200, 100);</span><br><span class="line">cxt.bezierCurveTo(200, 25, 290, 25, 290, 100);</span><br><span class="line">cxt.bezierCurveTo(290, 175, 200, 175, 200, 100);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/5308475-951b6edf9229d296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="眼睛"></p>
<p>接着画左右眼球：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;*右眼球*&#x2F;</span><br><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#000&#39;;</span><br><span class="line">cxt.arc(230, 130, 12, 0, 2 * Math.PI);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br><span class="line">&#x2F;*左眼球*&#x2F;</span><br><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#000&#39;;</span><br><span class="line">cxt.arc(170, 130, 12, 0, 2 * Math.PI);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>左右眼球：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-bcc8fa1d28b86a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="左右眼球"></p>
<p>接着画鼻子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();</span><br><span class="line">cxt.arc(200, 165, 25, 0, 2 * Math.PI);</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#d05823&#39;;</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>

<p>鼻子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-c435787e2ec2ca59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鼻子"></p>
<p>接着画胡须：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;左胡须</span><br><span class="line">cxt.beginPath();</span><br><span class="line">cxt.moveTo(80, 175);</span><br><span class="line">cxt.lineTo(150, 195);</span><br><span class="line">cxt.moveTo(80, 200);</span><br><span class="line">cxt.lineTo(150, 205);</span><br><span class="line">cxt.moveTo(80, 225);</span><br><span class="line">cxt.lineTo(150, 215);</span><br><span class="line">&#x2F;&#x2F;中部胡须</span><br><span class="line">cxt.moveTo(200, 195);</span><br><span class="line">cxt.lineTo(200, 290);</span><br><span class="line">&#x2F;&#x2F;右胡须</span><br><span class="line">cxt.moveTo(250, 195);</span><br><span class="line">cxt.lineTo(320, 175);</span><br><span class="line">cxt.moveTo(250, 205);</span><br><span class="line">cxt.lineTo(320, 200);</span><br><span class="line">cxt.moveTo(250, 215);</span><br><span class="line">cxt.lineTo(320, 225);</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>胡须:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-dd9fdcb1b60c2fce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="胡须"></p>
<p>接着画嘴：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.moveTo(80, 240);</span><br><span class="line">cxt.quadraticCurveTo(200, 350, 320, 240);</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>嘴：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-c8156d2154c31ab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="嘴"></p>
<p>接下来画围巾：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();</span><br><span class="line">cxt.moveTo(96, 316);</span><br><span class="line">cxt.lineTo(305, 316);</span><br><span class="line">cxt.lineTo(320, 316);</span><br><span class="line">cxt.arcTo(330, 316, 330, 326, 10);&#x2F;&#x2F;在画布上创建介于两个切线之间的弧，起点坐标为(330,316),终点坐标为(330,326),半径为10</span><br><span class="line">cxt.lineTo(330, 336);</span><br><span class="line">cxt.arcTo(330, 346, 305, 346, 10);</span><br><span class="line">cxt.lineTo(81, 346);</span><br><span class="line">cxt.arcTo(71, 346, 71, 336, 10);</span><br><span class="line">cxt.lineTo(71, 326);</span><br><span class="line">cxt.arcTo(71, 316, 81, 316, 10);</span><br><span class="line">cxt.lineTo(96, 316);</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#b13209&#39;;</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>围巾：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-00f257d5f26efa52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="围巾"></p>
<p>接着画衣服：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#0bb0da&#39;;</span><br><span class="line">cxt.moveTo(80, 346);</span><br><span class="line">&#x2F;&#x2F;左衣服</span><br><span class="line">cxt.lineTo(26, 406);</span><br><span class="line">cxt.lineTo(65, 440);</span><br><span class="line">cxt.lineTo(85, 418);</span><br><span class="line">cxt.lineTo(85, 528);</span><br><span class="line">cxt.lineTo(185, 528);</span><br><span class="line">&#x2F;&#x2F;右衣服</span><br><span class="line">cxt.lineTo(315, 528);</span><br><span class="line">cxt.lineTo(315, 418);</span><br><span class="line">cxt.lineTo(337, 440);</span><br><span class="line">cxt.lineTo(374, 406);</span><br><span class="line">cxt.lineTo(320, 346);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>衣服：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-4c8e54b75228ffd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="衣服"><br>接着画手：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;左手</span><br><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#fff&#39;;</span><br><span class="line">cxt.arc(37, 433, 30, 0, 2 * Math.PI);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br><span class="line">&#x2F;&#x2F;右手</span><br><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#fff&#39;;</span><br><span class="line">cxt.arc(363, 433, 30, 0, 2 * Math.PI);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>

<p>手：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-d49f6888ee45e0e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手"></p>
<p>接着画肚：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#fff&#39;;</span><br><span class="line">cxt.arc(200, 400, 91, 1.8 * Math.PI, 1.2 * Math.PI);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>肚：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-2c51ca97eeec8c11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="肚"></p>
<p>接着画小口袋</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cxt.beginPath();</span><br><span class="line">cxt.fillStyle &#x3D; &#39;#fff&#39;;</span><br><span class="line">cxt.moveTo(130, 394);</span><br><span class="line">cxt.lineTo(270, 394);</span><br><span class="line">cxt.moveTo(130, 394);</span><br><span class="line">cxt.bezierCurveTo(130, 490, 270, 490, 270, 394);</span><br><span class="line">cxt.fill();</span><br><span class="line">cxt.stroke();</span><br></pre></td></tr></table></figure>
<p>小口袋：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-82fcde37b775d0ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小口袋"></p>
<p>最后画两只脚以及两只脚的的空隙：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*两只脚的空隙*&#x2F;</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.fillStyle &#x3D; &#39;#fff&#39;;</span><br><span class="line">  cxt.arc(200, 529, 20,Math.PI, 0);</span><br><span class="line">  cxt.fill();</span><br><span class="line">  cxt.stroke();</span><br><span class="line">  &#x2F;*脚*&#x2F;</span><br><span class="line">  &#x2F;&#x2F;左脚</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.fillStyle&#x3D;&#39;#fff&#39;;</span><br><span class="line">  cxt.moveTo(180,528);</span><br><span class="line">  cxt.lineTo(72,528);</span><br><span class="line">  cxt.bezierCurveTo(52,528,52,558,72,558);</span><br><span class="line">  cxt.lineTo(180,558);</span><br><span class="line">  cxt.moveTo(180,558);</span><br><span class="line">  cxt.bezierCurveTo(200,558,200,528,180,528);</span><br><span class="line">  cxt.fill();</span><br><span class="line">  cxt.stroke();</span><br><span class="line">  &#x2F;&#x2F;右脚</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.fillStyle&#x3D;&#39;#fff&#39;;</span><br><span class="line">  cxt.moveTo(220,528);</span><br><span class="line">  cxt.lineTo(328,528);</span><br><span class="line">  cxt.bezierCurveTo(348,528,348,558,328,558);</span><br><span class="line">  cxt.lineTo(220,558);</span><br><span class="line">  cxt.moveTo(220,558);</span><br><span class="line">  cxt.bezierCurveTo(200,558,200,528,220,528);</span><br><span class="line">  cxt.fill();</span><br><span class="line">  cxt.stroke();</span><br></pre></td></tr></table></figure>



<p>完成了︿(￣︶￣)︿<br><img src="http://upload-images.jianshu.io/upload_images/5308475-24ab4e6cda048199.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="哆啦A梦"></p>
<p>完整代码请点击：<a href="https://github.com/shenzekun/doraemon/blob/master/Doraemon.html" target="_blank" rel="noopener">哆啦A梦</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题：从url到页面展现，这之中发生了什么？</title>
    <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E4%BB%8Eurl%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0%EF%BC%8C%E8%BF%99%E4%B9%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html</url>
    <content><![CDATA[<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-252af260aa56871a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入网址"></p>
<blockquote>
<p>我们平常在地址栏里输入一些网址时，页面很快就会出现，但在这之中到底发生了什么事情呢？</p>
</blockquote>
<a id="more"></a>


<h2 id="大概是这样的流程："><a href="#大概是这样的流程：" class="headerlink" title="大概是这样的流程："></a>大概是这样的流程：</h2><ul>
<li>在浏览器的地址栏中敲入了url</li>
<li>域名解析</li>
<li>服务器处理请求</li>
<li>浏览器处理</li>
<li>绘制网页</li>
</ul>
<h4 id="一、在浏览器的地址栏中敲入了url"><a href="#一、在浏览器的地址栏中敲入了url" class="headerlink" title="一、在浏览器的地址栏中敲入了url"></a>一、在浏览器的地址栏中敲入了url</h4><h5 id="首先，我们要知道url是什么？"><a href="#首先，我们要知道url是什么？" class="headerlink" title="首先，我们要知道url是什么？"></a>首先，我们要知道url是什么？</h5><p>URL（Uniform Resource Locator），统一资源定位符，用于定位互联网上的资源，实际上就是网站网址。url的格式一般为：</p>
<blockquote>
<p>协议类型://&lt;主机名&gt;:&lt;端口&gt;/&lt;路径&gt;/文件名</p>
</blockquote>
<p>其中协议类型可以是http（超文本传输协议）、https、ftp（文件传输协议）、telnet（远程登录协议）、file等等。而http是最常见的网络传输协议，https则是进行加密的网络传输。</p>
<p>例如，我的简书url为<code>http://www.jianshu.com/u/b473784d730c</code>，其中，“http”表示与web服务器通讯采用<code>http</code>协议，简书web服务器域名为<code>www.jianshu.com</code>，<code>u/b473784d730c</code>表示所访问的文件存在于web服务器上的路径。</p>
<p>url格式中主机名冒号后面的数字是端口编号，因为一台计算机常常会同时作为Web，FTP等服务器，端口编号用来告诉web服务器所在的主机要将请求交给哪个服务。默认情况下http服务的端口为80，不需要在url中输入，如果web服务器采用的不是这一个默认端口，就需要写明服务所用的端口。常见的协议默认端口如下：</p>
<table>
<thead>
<tr>
<th>协议类型</th>
<th align="center">默认端口</th>
</tr>
</thead>
<tbody><tr>
<td>http</td>
<td align="center">80</td>
</tr>
<tr>
<td>ftp</td>
<td align="center">21</td>
</tr>
<tr>
<td>https</td>
<td align="center">443</td>
</tr>
<tr>
<td>telnet</td>
<td align="center">23</td>
</tr>
</tbody></table>
<h5 id="IP是什么"><a href="#IP是什么" class="headerlink" title="IP是什么"></a>IP是什么</h5><p>IP是因特网中的每台连接到网络的计算机为实现相互通信而遵循的规则协议。每个处于互联网中的设备都有IP 地址，形如 192.168.0.1，而127.0.0.1代表本机的 IP。IP又分为局域网IP和公网IP。而局域网 IP 和公网 IP 是有差别的。每个网站就是靠IP来定位的。</p>
<p>为了便于记忆或辨识，人们使用域名来登录网站，每个域名背后有对应的IP地址。</p>
<p>比如对于 <code>http://www.jianshu.com</code>的URL，浏览器实际上不知道 <code>www.jianshu.com</code>到底是什么东西，需要查找<code>www.jianshu.com</code>网站所在服务器的IP地址，才能找到目标，这就是下文要说的域名解析。</p>
<h4 id="二、域名解析"><a href="#二、域名解析" class="headerlink" title="二、域名解析"></a>二、域名解析</h4><p>当用户在浏览器中输入url后,你使用的电脑会发出一个DNS请求到本地DNS服务器。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动,DNS请求到达本地DNS服务器之后会有以下几个步骤：</p>
<ul>
<li>查找浏览器缓存</li>
</ul>
<blockquote>
<p>浏览器会检查缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就将结束。Chrome浏览器看本身的DNS缓存时间比较方便，在地址栏输入<code>chrome://net-internals/#dns</code>，就可以看到了<br><img src="http://upload-images.jianshu.io/upload_images/5308475-1edd5a71a8c33fd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</blockquote>
<ul>
<li>查找操作系统缓存</li>
</ul>
<blockquote>
<p>如果用户的浏览器缓存中没有，浏览器会从hosts文件查找是否有存储DNS信息，查找是否有目标域名和对应的IP地址</p>
</blockquote>
<ul>
<li>查找路由器缓存</li>
</ul>
<blockquote>
<p>如果系统缓存中也找不到，那么查询请求就会发向路由器，路由器一般会有自己的DNS缓存。</p>
</blockquote>
<ul>
<li>查找ISP(Internet Service Provider) DNS 缓存</li>
</ul>
<blockquote>
<p>如果路由器缓存中也找不到，那么就查询ISP DNS 缓存服务器了。<br>我们都知道在我们的网络配置中都会有”DNS服务器地址”这一项，操作系统会把这个域名发送给这里设置的DNS，比如<code>114.114.114.114</code>,也就是本地区的域名服务器，通常是提供给你接入互联网的应用提供商。而<code>114.114.114.114</code>是国内移动、电信和联通通用的DNS。</p>
</blockquote>
<ul>
<li>迭代查询</li>
</ul>
<blockquote>
<p>如果前面都找不到DNS缓存的话，会有以下几个步骤：</p>
</blockquote>
<ul>
<li>本地 DNS服务器将该请求转发到互联网上的根域（根域没有名字，在DNS系统中就用一个空字符串来表示。例如<code>www.baidu.com.</code>现在的DNS系统都不会要求域名以<code>.</code>来结束，即<code>www.baidu.com</code>就可以解析了，但是现在很多DNS解析服务商还是会要求在填写DNS记录的时候以<code>.</code>来结尾域名。）</li>
<li>根域将所要查询域名中的顶级域（比如要查询<code>www.baidu,com</code>，该域名的顶级域就是<code>com</code>）的服务器IP地址返回到本地DNS。</li>
<li>本地DNS根据返回的IP地址，再向顶级域（就是com域）发送请求， com域服务器再将域名中的二级域（即<code>www.baidu.com</code>中的<code>baidu.com</code>）的IP地址返回给本地DNS。</li>
<li>本地DNS再向二级域发送请求进行查询。</li>
<li>之后不断重复这样的过程，直到本地DNS服务器得到最终的查询结果，并返回到主机。这时候主机才能通过域名访问该网站。<br>下图能很好的说明这个<em>迭代查询</em>:<br><img src="http://upload-images.jianshu.io/upload_images/5308475-cf58e66c93c1f2ec.gif?imageMogr2/auto-orient/strip" alt=""></li>
</ul>
<p>当查找到对应的IP地址之后，通过IP地址查找到对应的服务器，浏览器将用户发起的http请求发送给服务器。例如：<code>GET http://www.baidu.com/ HTTP/1.1</code></p>
<h4 id="三、服务器处理请求"><a href="#三、服务器处理请求" class="headerlink" title="三、服务器处理请求"></a>三、服务器处理请求</h4><p> 每台服务器上都会安装处理请求的应用——<code>Web server</code>。常见的web server产品有<code>apache</code>、<code>nginx</code>、<code>IIS</code>、<code>Lighttpd</code>等。</p>
<p>当web server接收到一个HTTP请求(request)，会返回一个HTTP响应(response)，例如送回一个HTML页面。对于不同用户发送的请求，会结合配置文件，把不同请求委托给服务器上处理对应请求的程序进行处理（例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术等）。</p>
<p>无论它们(脚本)的目的如何，这些服务器端(server-side)的程序通常产生一个HTML的响应(response)来让浏览器可以浏览。</p>
<p>那么如何处理请求？实际上就是后台处理的工作。后台开发现在有很多框架，但大部分都还是按照<a href="https://zh.wikipedia.org/wiki/MVC" target="_blank" rel="noopener">MVC设计模式</a>进行搭建的。</p>
<p> 处理的过程如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-d45e8967170041f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>MVC</strong>的处理过程是这样的：对于每一个用户输入的请求，首先被控制器接收，控制器决定用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器确定用哪个视图模型，用相应的视图格式化模型返回html字符串给浏览器，并通过显示页面呈现给用户。</p>
<h4 id="四、浏览器处理"><a href="#四、浏览器处理" class="headerlink" title="四、浏览器处理"></a>四、浏览器处理</h4><p>接下来就是浏览器进行处理， 通过后台处理返回的HTML字符串被浏览器接受后被一句句读取解析，html页面经历加载、解析、渲染。</p>
<ul>
<li><h5 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h5><p>浏览器对一个html页面的加载顺序是从上而下的。如果加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。</p>
</li>
<li><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5></li>
<li><p><em>解析文档*</em>是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树，也就是DOM树。如下图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-3817847173a249ef.gif?imageMogr2/auto-orient/strip" alt=""></p>
</li>
<li><p><em>css解析*</em>是指将css文件解析为样式表对象。如下图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-810853491150d1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p><em>js解析*</em>是文件在加载的同时也进行解析<br>如果想深入如何解析的话可以看<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Parsing_general" target="_blank" rel="noopener">浏览器的工作原理：新式网络浏览器幕后揭秘</a>这篇文章</p>
</li>
<li><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><p>即为构建渲染树的过程，就是将DOM树进行可视化表示。构建这棵树是为了以正确的顺序绘制文档内容。</p>
</li>
</ul>
<h4 id="五、绘制网页"><a href="#五、绘制网页" class="headerlink" title="五、绘制网页"></a>五、绘制网页</h4><p>浏览器根据 HTML 和 CSS 计算得到渲染树，最终绘制到屏幕上</p>
<hr>
<p>参考的文章：<br><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">前端经典面试题: 从输入URL到页面加载发生了什么？</a><br><a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/" target="_blank" rel="noopener">What really happens when you navigate to a URL</a><br><a href="http://book.jirengu.com/jrg-team/frontend-knowledge-ppt/www/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8-%E4%BB%8E%20URL%E8%BE%93%E5%85%A5%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0.html#/" target="_blank" rel="noopener">从URL输入到页面展现</a><br> <a href="http://blog.csdn.net/nawuyao/article/details/50386409" target="_blank" rel="noopener">MVC模型结构是什么</a><br><a href="http://weizhifeng.net/talking-about-domain.html" target="_blank" rel="noopener">域名详解</a><br><a href="http://www.jianshu.com/p/e141d1543143" target="_blank" rel="noopener">浏览器~加载，解析，渲染</a></p>
<hr>
<p>由于本人的能力有限，如果哪里写的不对的话，请指出！感谢您的观看😀</p>
<hr>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>四种方法实现数据双向绑定</title>
    <url>/%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在一些前端框架中，例如 <code>angular</code>，<code>vue</code>都有数据双向数据绑定的功能，这个功能极大的方便我们操作数据。那么接下来我会讲解一下双向数据绑定的4种实现方式。</p>
</blockquote>
<a id="more"></a>

<h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><h3 id="1-手动触发绑定"><a href="#1-手动触发绑定" class="headerlink" title="1.手动触发绑定"></a>1.手动触发绑定</h3><p>手动触发绑定的主要思路是通过在数据对象定义 get 和 set 方法(可以使用其他的命名方法)，调用时手动去触发 get 和 set 方法去获取数据，修改数据，改变数据后会主动去触发 get 和 set 函数中视图层的重新渲染。</p>
<p>简单的手动触发绑定代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>手动双向绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">s-value</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"el"</span> <span class="attr">s-text</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> elems = [<span class="built_in">document</span>.getElementById(<span class="string">'el'</span>), <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">            value: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> directive = &#123;</span></span><br><span class="line"><span class="actionscript">            text: <span class="function"><span class="keyword">function</span> <span class="params">(text)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.innerHTML = text</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            value: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.setAttribute(<span class="string">'value'</span>, value)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听 input 的 keyup 事件</span></span></span><br><span class="line"><span class="actionscript">        elems[<span class="number">1</span>].addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">set</span>(<span class="string">'value'</span>, e.target.value)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> elems) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">of</span> elem.attributes) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (attr.nodeName.indexOf(<span class="string">'s-'</span>) !== <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 调用属性指令</span></span></span><br><span class="line">                        directive[attr.nodeName.slice(2)].call(elem, data[attr.nodeValue])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">(key, value)</span> </span>&#123;</span></span><br><span class="line">            data[key] = value;</span><br><span class="line">            scan();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-数据劫持"><a href="#2-数据劫持" class="headerlink" title="2.数据劫持"></a>2.数据劫持</h3><p>数据劫持的基本思路是使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty</a> 对 ViewModel 数据对象进行 get 和 set 的监听，当有数据变动的时候扫描元素节点，然后去运行对应节点上的指令（directive）。</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据劫持<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">s-value</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"el"</span> <span class="attr">s-text</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> elems = [<span class="built_in">document</span>.getElementById(<span class="string">'el'</span>), <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">            value: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> directive = &#123;</span></span><br><span class="line"><span class="actionscript">            text: <span class="function"><span class="keyword">function</span> <span class="params">(text)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.innerHTML = text</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            value: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.setAttribute(<span class="string">'value'</span>, value)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> value;</span></span><br><span class="line"><span class="actionscript">        defineGetAndSet(data, <span class="string">'value'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听 input 的 keyup 事件</span></span></span><br><span class="line"><span class="actionscript">        elems[<span class="number">1</span>].addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">            data.value = e.target.value;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> elems) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">of</span> elem.attributes) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (attr.nodeName.indexOf(<span class="string">'s-'</span>) !== <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 调用属性指令</span></span></span><br><span class="line">                        directive[attr.nodeName.slice(2)].call(elem, data[attr.nodeValue])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">defineGetAndSet</span><span class="params">(obj, attrName)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">Object</span>.defineProperty(obj, attrName, &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> value</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(newValue)</span> </span>&#123;</span></span><br><span class="line">                    value = newValue;</span><br><span class="line">                    scan()</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                enumerable: <span class="literal">true</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-使用-es6的-Proxy"><a href="#3-使用-es6的-Proxy" class="headerlink" title="3.使用 es6的 Proxy"></a>3.使用 es6的 Proxy</h3><p>利用<a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">Proxy</a> ，它可以目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此可以对外界的访问进行过滤和改写，实现数据双向数据绑定和上一个类似。</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用 proxy 进行数据双向绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">s-value</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"el"</span> <span class="attr">s-text</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> elems = [<span class="built_in">document</span>.getElementById(<span class="string">'el'</span>), <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> directive = &#123;</span></span><br><span class="line"><span class="actionscript">            text: <span class="function"><span class="keyword">function</span> <span class="params">(text)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.innerHTML = text</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            value: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.setAttribute(<span class="string">'value'</span>, value)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// ------------- 看下面 -------------</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> data = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">(target, key, receiver)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> target.value</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="keyword">set</span>(target, key, value, receiver) &#123;</span></span><br><span class="line">                target.value = value;</span><br><span class="line">                scan();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// ------------- 看上面 -------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听 input 的 keyup 事件</span></span></span><br><span class="line"><span class="actionscript">        elems[<span class="number">1</span>].addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">            data.value = e.target.value;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> elems) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">of</span> elem.attributes) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (attr.nodeName.indexOf(<span class="string">'s-'</span>) !== <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 调用属性指令</span></span></span><br><span class="line">                        directive[attr.nodeName.slice(2)].call(elem, data[attr.nodeValue])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-脏检查"><a href="#4-脏检查" class="headerlink" title="4. 脏检查"></a>4. 脏检查</h3><p>脏检查的基本原理是在 ViewModel 对象的某个属性值发生变化的时候找到与这个属性值相关的所有元素，然后去比较数据变化，如果变化就用 directive 指令调用，对这个元素进行重新渲染。</p>
<p>简单的脏检查代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>脏检查<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">s-bind</span>=<span class="string">"value"</span> <span class="attr">s-event</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"el"</span> <span class="attr">s-event</span>=<span class="string">"text"</span> <span class="attr">s-bind</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> elems = [<span class="built_in">document</span>.getElementById(<span class="string">'el'</span>), <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> directives = &#123;</span></span><br><span class="line"><span class="actionscript">            text: <span class="function"><span class="keyword">function</span> <span class="params">(text)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.innerHTML = text</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            value: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.setAttribute(<span class="string">'value'</span>, value)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">            value: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 扫描元素，使每个元素的 directive 数组为空</span></span></span><br><span class="line">        scan(elems)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听 input 的 keyup 事件</span></span></span><br><span class="line"><span class="actionscript">        elems[<span class="number">1</span>].addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">            data.value = e.target.value;</span><br><span class="line"><span class="actionscript">            startDirtyCheck(e.target.getAttribute(<span class="string">'s-bind'</span>))</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> elems) &#123;</span></span><br><span class="line">                elem.directive = []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 开启脏检查</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">startDirtyCheck</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[s-bind='</span> + value + <span class="string">']'</span>)</span></span><br><span class="line">            dirtyCheck(list)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">dirtyCheck</span><span class="params">(elems)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 扫描带指令的节点属性</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = elems.length; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> elem = elems[i];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, len1 = elem.attributes.length; j &lt; len1; j++) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> attr = elem.attributes[j];</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (attr.nodeName.indexOf(<span class="string">'s-event'</span>) !== <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> dataKey = elem.getAttribute(<span class="string">'s-bind'</span>)</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 进行脏数据检查，如果数据改变，重新执行指令</span></span></span><br><span class="line">                        if (elem.directive[attr.nodeValue] !== data[dataKey]) &#123;</span><br><span class="line">                            directives[attr.nodeValue].call(elem, data[dataKey])</span><br><span class="line">                            elem.directive[attr.nodeValue] = data[dataKey]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>有关HTML常被问到的知识点</title>
    <url>/%E6%9C%89%E5%85%B3HTML%E5%B8%B8%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</url>
    <content><![CDATA[<hr>
<h2 id="HTML、XML、XHTML-有什么区别"><a href="#HTML、XML、XHTML-有什么区别" class="headerlink" title="HTML、XML、XHTML 有什么区别?"></a>HTML、XML、XHTML 有什么区别?</h2><a id="more"></a>

<blockquote>
<ol>
<li><strong>HTML</strong>即是超文本标记语言（Hyper Text Markup Language），是<strong>最早</strong>写网页的语言，但是由于时间早，规范不是很好，大小写混写且编码不规范,是语法较为松散的、不严格的Web语言</li>
<li><strong>XHTML</strong>是升级版的html（Extensible Hyper Text Markup Language），对html进行了规范，编码更加严谨纯洁，也是一种过渡语言，html向xml过渡的语言。实际上XHTML 与 HTML 4.01 标准没有太多的不同。</li>
<li><strong>XML</strong>是可扩展标记语言（Extensible Markup Language），是一种跨平台语言，编码更自由，可以自由创建标签（<br>比如像下面这样创建：</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;Tove&lt;&#x2F;to&gt;</span><br><span class="line">&lt;from&gt;Jani&lt;&#x2F;from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">&lt;body&gt;Don&#39;t forget me this weekend!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure>
<p>），主要用于存储数据和结构，可扩展</p>
<h2 id="HTML和XML的区别："><a href="#HTML和XML的区别：" class="headerlink" title="HTML和XML的区别："></a>HTML和XML的区别：</h2><ol>
<li>XML 被设计用来传输和存储数据，其焦点是数据的内容。</li>
<li>HTML 被设计用来显示数据，其焦点是数据的外观。</li>
<li>HTML 旨在显示信息，而 XML 旨在传输信息。</li>
<li>XML在定义标记时区分大小写，而HTML标记不区分大小写。</li>
</ol>
<h2 id="HTML和XHTML的区别："><a href="#HTML和XHTML的区别：" class="headerlink" title="HTML和XHTML的区别："></a>HTML和XHTML的区别：</h2><ol>
<li><p>XHTML 元素必须被正确地嵌套。<br>例如：XHTML必须要这样<code>&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/i&gt;&lt;/b&gt;</code><br>而在 HTML 中，某些元素可以像这样彼此不正确地嵌套：<br><code>&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/b&gt;&lt;/i&gt;</code></p>
</li>
<li><p>XHTML 元素必须被关闭。</p>
</li>
</ol>
<p><em>例如<em><code>&lt;p&gt;This is a paragraph&lt;/p&gt;</code>===&gt;&gt;</em>这是正确的</em><br><code>&lt;p&gt;This is a paragraph</code>===&gt;&gt;<em>这是错误的</em><br>3. 标签名必须用小写字母。<br><em>例如: <em><code>&lt;p&gt;This is a paragraph&lt;/p&gt;</code>==&gt;&gt;</em>这是正确的</em><br><code>&lt;P&gt;This is a paragraph&lt;/P&gt;</code>===&gt;&gt;<em>这是错误的</em></p>
<ol start="4">
<li>XHTML 文档必须拥有根元素。<br>所有的 XHTML 元素必须被嵌套于 <code>&lt;html&gt;</code> 根元素中</li>
</ol>
<hr>
<h2 id="怎样理解-HTML-语义化"><a href="#怎样理解-HTML-语义化" class="headerlink" title="怎样理解 HTML 语义化?"></a>怎样理解 HTML 语义化?</h2><blockquote>
<p>HTML语义化是让大家直观的认识标签(markup)和属性(attribute)的用途和作用，选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析，并且便于团队开发和维护。</p>
</blockquote>
<hr>
<h2 id="怎样理解内容与样式分离的原则"><a href="#怎样理解内容与样式分离的原则" class="headerlink" title="怎样理解内容与样式分离的原则?"></a>怎样理解内容与样式分离的原则?</h2><blockquote>
<p>写 HTML 的时候先不管样式, 重点放在HTML的结构和语义化上，让 HTML 能体现页面结构或者内容。之后再去写样式。<br>写 JS 的时候，尽量不要用 JS 去直接操作样式，而是通过给元素添加删除class来控制样式变化。<br>文档结构与文档样式的分离可以确保网页的平稳退化，也让内容和样式在可以分开独立编辑。</p>
</blockquote>
<hr>
<h2 id="有哪些常见的meta标签"><a href="#有哪些常见的meta标签" class="headerlink" title="有哪些常见的meta标签?"></a>有哪些常见的meta标签?</h2><blockquote>
<ul>
<li>指定字符集<br><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> </li>
<li>向搜索引擎说明你的网页的关键词<br><code>&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</code> </li>
<li>告诉搜索引擎你的站点的主要内容<br><code>&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</code>  </li>
<li>告诉搜索引擎你的站点的制作的作者<br><code>&lt;meta name=&quot;author&quot; content=&quot;your name&quot;&gt;</code></li>
<li>响应式页面<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></li>
</ul>
</blockquote>
<ul>
<li>定时让网页在3秒内跳转到mozilla首页(<code>http-equiv</code> 属性为名称/值对提供了名称。并指示服务器在发送实际的文档之前先在要传送给浏览器的 MIME 文档头部包含名称/值对。)<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;3&quot; url=https://www.mozilla.org&quot;&gt;</code></li>
<li>如果安装了GCF (Google Chrome Frame)，则使用GCF来渲染页面 (“chrome=1”), 如果没有安装GCF，则使用最高版本的IE内核进行渲染 (“IE=edge”)。<code>X-UA-Compatible</code>(浏览器采取何种版本渲染当前页面)<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</code></li>
<li>浏览器的内核控制<br><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit|ie-comp|ie-stand&quot;&gt;</code></li>
</ul>
<hr>
<h2 id="文档声明的作用"><a href="#文档声明的作用" class="headerlink" title="文档声明的作用?"></a>文档声明的作用?</h2><blockquote>
<p>文档声明用来告知浏览器当前文档所使用的类型，让浏览器解析器知道要用什么规范来解析文档。</p>
</blockquote>
<hr>
<h2 id="严格模式和混杂模式指什么"><a href="#严格模式和混杂模式指什么" class="headerlink" title="严格模式和混杂模式指什么?"></a>严格模式和混杂模式指什么?</h2><blockquote>
<p>在严格模式中，浏览器以其支持的最高标准呈现页面。<br>在混杂模式中，又称怪异模式或兼容模式，浏览器用自己的方式解析代码，页面以一种比较宽松的向后兼容的方式显示。混杂模式通常模拟老式浏览器的行为以防止老站点无法工作。</p>
</blockquote>
<hr>
<h2 id="的作用"><a href="#的作用" class="headerlink" title=" 的作用?"></a><!doctype html> 的作用?</h2><blockquote>
<p>它是html5标准网页声明,告诉浏览器用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式。</p>
</blockquote>
<hr>
<h2 id="浏览器乱码的原因是什么？如何解决？"><a href="#浏览器乱码的原因是什么？如何解决？" class="headerlink" title="浏览器乱码的原因是什么？如何解决？"></a>浏览器乱码的原因是什么？如何解决？</h2><blockquote>
<p> 乱码产生的<strong>根本原因</strong>是保存的编码格式和浏览器解析时的解码格式不匹配导致的。<br><strong>解决方式：</strong> 写代码的时候在html 的 <code>&lt;head&gt;</code>里添加<code>&lt;meta charset=&#39;xxx&#39;&gt;</code>并且保存的时候仍选择同样的编码方式。</p>
</blockquote>
<hr>
<h2 id="常见的浏览器有哪些？什么内核？"><a href="#常见的浏览器有哪些？什么内核？" class="headerlink" title="常见的浏览器有哪些？什么内核？"></a>常见的浏览器有哪些？什么内核？</h2><blockquote>
<ul>
<li><strong>Internet explorer</strong> 使用的是<strong>Trident</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>Firefox</strong>使用的是<strong>Gecko</strong>。</li>
<li><strong>opera</strong>之前使用的是<strong>Presto</strong>，后来用<strong>Blink</strong></li>
<li>苹果的<strong>Safari</strong>，谷歌的<strong>Chrome</strong>使用的是<strong>WebKit</strong>，还有国产的大部分双核浏览器其中一核就是<strong>WebKit</strong>。</li>
</ul>
<hr>
<h2 id="列出常见的标签，并简单介绍这些标签用在什么场景？"><a href="#列出常见的标签，并简单介绍这些标签用在什么场景？" class="headerlink" title="列出常见的标签，并简单介绍这些标签用在什么场景？"></a>列出常见的标签，并简单介绍这些标签用在什么场景？</h2><table>
<thead>
<tr>
<th>标签</th>
<th align="center">运用场景</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;html&gt;</code></td>
<td align="center">HTML 页面的根元素</td>
</tr>
<tr>
<td><code>&lt;body&gt;</code></td>
<td align="center">文档的内容</td>
</tr>
<tr>
<td><code>&lt;head&gt;</code></td>
<td align="center">用于定义文档的头部</td>
</tr>
<tr>
<td><code>&lt;meta&gt;</code></td>
<td align="center">提供了元数据.元数据也不显示在页面上，被浏览器解析</td>
</tr>
<tr>
<td><code>&lt;title&gt;</code></td>
<td align="center">文档的标题</td>
</tr>
<tr>
<td><code>&lt;h1&gt;-&lt;h6&gt;</code></td>
<td align="center">定义了一级标题到六级标题，标题字体大小逐渐减弱</td>
</tr>
<tr>
<td><code>&lt;p&gt;</code></td>
<td align="center">定义一个段落</td>
</tr>
<tr>
<td><code>&lt;a&gt;</code></td>
<td align="center">网页链接</td>
</tr>
<tr>
<td><code>&lt;div&gt;</code></td>
<td align="center">块级元素，它可用于组合其他 HTML 元素的容器,没有特定的含义</td>
</tr>
<tr>
<td><code>&lt;span&gt;</code></td>
<td align="center">内联元素，也没有特定的含义，可用作文本的容器</td>
</tr>
<tr>
<td><code>&lt;u&gt;</code></td>
<td align="center">下划线</td>
</tr>
<tr>
<td><code>&lt;em&gt;</code></td>
<td align="center">强调文本</td>
</tr>
<tr>
<td><code>&lt;strong&gt;</code></td>
<td align="center">加重文本</td>
</tr>
<tr>
<td><code>&lt;ol&gt;</code></td>
<td align="center">有序列表</td>
</tr>
<tr>
<td><code>&lt;ul&gt;</code></td>
<td align="center">无序列表</td>
</tr>
<tr>
<td><code>&lt;li&gt;</code></td>
<td align="center">定义列表项目</td>
</tr>
<tr>
<td><code>&lt;img&gt;</code></td>
<td align="center">图片</td>
</tr>
<tr>
<td><code>&lt;br &gt;</code></td>
<td align="center">换行</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code></td>
<td align="center">定义输入控件</td>
</tr>
<tr>
<td><code>&lt;i&gt;</code></td>
<td align="center">斜体字</td>
</tr>
<tr>
<td><code>&lt;table&gt;</code></td>
<td align="center">定义表</td>
</tr>
<tr>
<td><code>&lt;tr&gt;</code></td>
<td align="center">定义表格中的行</td>
</tr>
<tr>
<td><code>&lt;td&gt;</code></td>
<td align="center">定义表中的单元格</td>
</tr>
<tr>
<td><code>&lt;th&gt;</code></td>
<td align="center">定义表格的表头</td>
</tr>
<tr>
<td><code>&lt;tbody&gt;</code></td>
<td align="center">定义表格的主体</td>
</tr>
<tr>
<td><code>&lt;tfoot&gt;</code></td>
<td align="center">定义表格的页脚</td>
</tr>
<tr>
<td><code>&lt;hr&gt;</code></td>
<td align="center">创建一条水平线</td>
</tr>
<tr>
<td><code>&lt;iframe&gt;</code></td>
<td align="center">定义内联框架</td>
</tr>
<tr>
<td><code>&lt;cite&gt;</code></td>
<td align="center">定义作品的标题</td>
</tr>
<tr>
<td><code>&lt;button&gt;</code></td>
<td align="center">按钮</td>
</tr>
<tr>
<td><code>&lt;b&gt;</code></td>
<td align="center">定义粗体文本</td>
</tr>
<tr>
<td><code>&lt;form&gt;</code></td>
<td align="center">定义用于用户输入的HTML表单</td>
</tr>
<tr>
<td><code>&lt;caption&gt;</code></td>
<td align="center">定义表标题</td>
</tr>
<tr>
<td><code>&lt;footer&gt;</code></td>
<td align="center">定义文档或节的页脚</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>学生免费申请JetBrains许可证技巧</title>
    <url>/%E5%AD%A6%E7%94%9F%E5%85%8D%E8%B4%B9%E7%94%B3%E8%AF%B7JetBrains%E8%AE%B8%E5%8F%AF%E8%AF%81%E6%8A%80%E5%B7%A7.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>用过JetBrain公司出的软件的人都知道，这个公司出的软件都比较好用，像webstorm，phpstrom等等，但是就是太贵了。对于学生，可以免费使用jetbrain公司的软件，那么接下来我会讲一讲如何申请免费</p>
</blockquote>
<a id="more"></a>

<ul>
<li><h2 id="学生免费申请许可证地址："><a href="#学生免费申请许可证地址：" class="headerlink" title="学生免费申请许可证地址："></a>学生免费申请许可证地址：</h2><p><a href="https://www.jetbrains.com/student/" target="_blank" rel="noopener">https://www.jetbrains.com/student/</a></p>
</li>
<li><h2 id="点击apply-now出现如下图："><a href="#点击apply-now出现如下图：" class="headerlink" title="点击apply now出现如下图："></a>点击<strong>apply now</strong>出现如下图：</h2><p><img src="http://upload-images.jianshu.io/upload_images/5308475-023ecea6cc39f83b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><h2 id="支持的验证方法有："><a href="#支持的验证方法有：" class="headerlink" title="支持的验证方法有："></a>支持的验证方法有：</h2><ul>
<li><strong>邮件认证</strong>: 如果你的学校对学生有提供类似<code>@.edu</code>或者是 <code>@.edu.cn</code> 的邮箱，那么你可以通过这种方式去认证。</li>
<li><strong>ISIC/ITIC 认证</strong>： 这个没试过，不知道要怎么弄 —__—</li>
<li><strong>文档认证：</strong> 我是申请这个的，这个需要你的学生证 ===&gt;</li>
</ul>
</li>
<li><p><em>这里填你的学校就行了！*</em><br><img src="http://upload-images.jianshu.io/upload_images/5308475-b98083bbc997b093.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><strong>Comment里面填一些你想说的话，然后点APPLY FOR FREE PRODUCTS，就申请完成了!</strong><br><img src="http://upload-images.jianshu.io/upload_images/5308475-7360994c4204383a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
</li>
<li><h2 id="等"><a href="#等" class="headerlink" title="等"></a>等</h2><p>我是星期六申请的，星期一晚上就发邮件给我了，大约用了3天左右，如图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-4375c88f24022183.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>点 <strong>Activate Educational License</strong>就激活成功了！<br>我用<strong>phpstrom</strong>举例子<br><img src="http://upload-images.jianshu.io/upload_images/5308475-0ef3e9d44898ad7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">在这里输入你获得的许可证就能成功激活了。</p>
</li>
<li><p><em>注意，许可证有效期为1年!（过期了可重新申请）*</em></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>浮动</title>
    <url>/%E6%B5%AE%E5%8A%A8.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>最近在学浮动的知识，下面总结了一些浮动的一些特征</p>
</blockquote>
<a id="more"></a>

<p><strong>1. 块级元素浮动将并排显示，不再独占一行</strong></p>
<p>示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fgtxa48pcyj306m0cowea.jpg" alt=""></p>
<p>修改：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-class">.box2</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">            <span class="attribute">float</span>: left;<span class="comment">/*新增*/</span></span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>修改效果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fgtxbxfi9hj30c007gq2q.jpg" alt=""></p>
<p><strong>2. 内联样式浮动就可以设置宽高，不仅能够支持margin-left(right)，而且也支持margin-top(bottom)</strong></p>
<p>示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 20<span class="selector-tag">px</span>;<span class="comment">/*无效*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span>: 70<span class="selector-tag">px</span>;<span class="comment">/*无效*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span>: 20<span class="selector-tag">px</span>;<span class="comment">/*无效*/</span></span></span><br><span class="line">            padding: 100px 30px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgtyjzeb3dj307206w0si.jpg" alt=""></p>
<p>修改：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box2</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">20px</span>;<span class="comment">/*生效*/</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">70px</span>;<span class="comment">/*生效*/</span></span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;<span class="comment">/*生效*/</span></span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">100px</span> <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">            <span class="attribute">float</span>: left;<span class="comment">/*新增*/</span></span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>修改效果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fgtyq0mmujj30920gk0sk.jpg" alt=""></p>
<p><strong>3. 浮动元素脱离正常的文档流,普通元素会占据浮动元素的位置</strong></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgu19u1pbaj31240bwaai.jpg" alt=""></p>
<p>从上图可以看出，默认三个设置了宽高的<code>block</code>元素，本来会格子独占一行；如果框1设置了向左/向右浮动，他会忽略框2和框3，直到碰到父元素；同时也存在盖住普通元素的风险。</p>
<p><strong>4. 浮动会导致父元素高度坍塌</strong></p>
<p>示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: solid 5px #0e0; width:300px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px; width: 100px; background-color: Red;  float:left;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px; width: 100px; background-color: Green;  float:left;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px; width: 100px; background-color: Yellow;  float:left;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgu1fgr312j30hm07et8k.jpg" alt=""></p>
<p>如上图所示，浮动元素脱离了文档流，并不占据文档流的位置，自然父元素也就不能被撑开，所以没了高度，导致父元素高度坍塌。</p>
<blockquote>
<p>浮动元素对父元素的影响</p>
</blockquote>
<p>对父容器 若子元素都是浮动元素，则无法撑开父元素高度，父元素失去高度。</p>
<blockquote>
<p>浮动元素其他浮动元素的影响</p>
</blockquote>
<p>对其他浮动元素，如果包含块太窄，无法完全水平容纳浮动元素，那么其他浮动元素就会向下移动，直到有足够空间。如果浮动元素高度不同，那么向下移动时可能会被卡住。</p>
<p>示例代码1（块太窄，向下移动）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border: solid 5px #0e0; width:250px;&quot;&gt;</span><br><span class="line">      &lt;div style&#x3D;&quot;height: 100px; width: 100px; background-color: Red;  float:left;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div style&#x3D;&quot;height: 100px; width: 100px; background-color: Green;  float:left;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div style&#x3D;&quot;height: 100px; width: 100px; background-color: Yellow;  float:left;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgu24kxrizj30eu0ccq2t.jpg" alt=""></p>
<p>示例代码2（卡住）:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border: solid 5px #0e0; width:250px;&quot;&gt;</span><br><span class="line">      &lt;div style&#x3D;&quot;height: 120px; width: 100px; background-color: Red;  float:left;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div style&#x3D;&quot;height: 100px; width: 100px; background-color: Green;  float:left;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div style&#x3D;&quot;height: 100px; width: 100px; background-color: Yellow;  float:left;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fgu26lbnj9j30eq0cca9x.jpg" alt=""></p>
<blockquote>
<p>浮动元素对普通元素的影响</p>
</blockquote>
<p>普通元素会表现得当作浮动元素不存在一样，浮动元素可以覆盖普通元素，如果宽高合适，普通元素可以占据浮动元素原来的位置</p>
<blockquote>
<p>对文字的影响</p>
</blockquote>
<p>文字(既inline-level)级的元素会环绕浮动元素，表现的像是察觉到浮动元素一样。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯 李白喝酒</title>
    <url>/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%9D%8E%E7%99%BD%E5%96%9D%E9%85%92%EF%BC%81.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>话说大诗人李白，一生好饮。幸好他从不开车。<br>一天，他提着酒壶，从家里出来，酒壶中有酒两斗。他边走边唱：</p>
<p>无事街上走，提壶去打酒。<br>逢店加一倍，遇花喝一斗。</p>
<p>这一路上，他一共遇到店 55 次，遇到花 1010 次，已知最后一次遇到的是花，他正好把酒喝光了。请你计算李白遇到店和花的次序，有多少种可能的方案。</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们已知遇店 5 次，遇花 10 次，并且最后一次遇到花，正好把酒喝光。那么我们可以把店作为二进制中的 1，把花作为二进制中的 0，因为已经确定最后一次遇到的是花，所以我们需要判断枚举的结果是否刚好有 5个 1 和 9个 0。那么我们就枚举出 14 位二进制的所有可能并加以判断即可，判断思路为判断二进制是否有 9 个 0，5个 1，并且最终酒刚好剩 1 斗</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="comment">//方案数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="number">1</span>&lt;&lt;<span class="number">14</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> dian=<span class="number">0</span>;<span class="comment">//表示遇到店的次数</span></span><br><span class="line">        <span class="keyword">int</span> hua=<span class="number">0</span>;<span class="comment">//表示遇到话的次数</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">2</span>;<span class="comment">//初始酒壶有两斗</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">14</span> ;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;j)) &#123;<span class="comment">//这里判断二进制i从右数第j+1为是否为1</span></span><br><span class="line">                dian++;<span class="comment">//遇到店，次数加1</span></span><br><span class="line">                num*=<span class="number">2</span>;<span class="comment">//加一倍</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                hua++;<span class="comment">//遇到花，次数加1</span></span><br><span class="line">                num-=<span class="number">1</span>;<span class="comment">//喝一斗</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dian==<span class="number">5</span>&amp;&amp;hua==<span class="number">9</span>&amp;&amp;num==<span class="number">1</span>) &#123;</span><br><span class="line">            ++ans;<span class="comment">//记录方法数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c-c++</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯 三羊献瑞</title>
    <url>/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E4%B8%89%E7%BE%8A%E7%8C%AE%E7%91%9E.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>观察下面的加法算式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      祥 瑞 生 辉</span><br><span class="line"></span><br><span class="line">   +  三 羊 献 瑞</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    三 羊 生 瑞 气</span><br></pre></td></tr></table></figure>


<p>其中，相同的汉字代表相同的数字，不同的汉字代表不同的数字，‘三’和‘祥’不能为 0。请你计算出“三羊献瑞”所代表的 4 位数是什么。（答案唯一）</p>
<p>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字，行末不要换行。</p>
<a id="more"></a>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题我是直接用暴力法求解的(￣▽￣)”</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,r,s,h,san,yan,xian,qi,sum1,sum2,sum3;</span><br><span class="line">    <span class="keyword">for</span> (x=<span class="number">1</span>; x&lt;=<span class="number">9</span>;x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (r=<span class="number">0</span>; r&lt;=<span class="number">9</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (s=<span class="number">0</span>; s&lt;=<span class="number">9</span>; s++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (h=<span class="number">0</span>; h&lt;=<span class="number">9</span>; h++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (san=<span class="number">1</span>; san&lt;=<span class="number">9</span>; san++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (yan=<span class="number">0</span>; yan&lt;=<span class="number">9</span>; yan++) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (xian=<span class="number">0</span>; xian&lt;=<span class="number">9</span>; xian++) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (qi=<span class="number">0</span>; qi&lt;=<span class="number">9</span>; qi++) &#123;</span><br><span class="line">                                    sum1=x*<span class="number">1000</span>+r*<span class="number">100</span>+s*<span class="number">10</span>+h;</span><br><span class="line">                                    sum2=san*<span class="number">1000</span>+yan*<span class="number">100</span>+xian*<span class="number">10</span>+r;</span><br><span class="line">                                    sum3=san*<span class="number">10000</span>+yan*<span class="number">1000</span>+s*<span class="number">100</span>+r*<span class="number">10</span>+qi;</span><br><span class="line">                                    <span class="keyword">if</span> (sum1+sum2==sum3 &amp;&amp; x!=r &amp;&amp; x!=s &amp;&amp; x!=h &amp;&amp; x!=san &amp;&amp; x!=yan &amp;&amp; x!=xian &amp;&amp; x!=qi &amp;&amp; r!=s &amp;&amp; r!=h &amp;&amp; r!=san &amp;&amp; r!=h &amp;&amp; r!=san &amp;&amp; r!=yan &amp;&amp; r!=xian &amp;&amp; r!=qi &amp;&amp;s!=h &amp;&amp; s!=san &amp;&amp; s!=yan &amp;&amp; s!=xian &amp;&amp; s!=qi &amp;&amp;h!=san &amp;&amp;h!=yan &amp;&amp;h!=xian &amp;&amp; h!=qi &amp;&amp;san!=yan &amp;&amp;san!=qi&amp;&amp; yan!=xian &amp;&amp; yan!=qi &amp;&amp;xian!=qi) &#123;</span><br><span class="line">                                                                        <span class="built_in">printf</span>(<span class="string">"%d+%d=%d\n"</span>,sum1,sum2,sum3);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c-c++</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-四平方和问题</title>
    <url>/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9B%9B%E5%B9%B3%E6%96%B9%E5%92%8C%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>四平方和定理，又称为拉格朗日定理：<br>每个正整数都可以表示为至多4个正整数的平方和。<br>如果把0包括进去，就正好可以表示为4个数的平方和。</p>
<a id="more"></a>

<p>比如：<br>5 = 0^2 + 0^2 + 1^2 + 2^2<br>7 = 1^2 + 1^2 + 1^2 + 2^2<br>（ ^ 符号表示乘方的意思）</p>
<p>对于一个给定的正整数，可能存在多种平方和的表示法。<br>要求你对4个数排序：<br>0 &lt;= a &lt;= b &lt;= c &lt;= d<br>并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法</p>
<p>程序输入为一个正整数N (N&lt;5000000)<br>要求输出4个非负整数，按从小到大排序，中间用空格分开</p>
<p>例如，输入：<br>5<br>则程序应该输出：<br>0 0 1 2</p>
<p>再例如，输入：<br>12<br>则程序应该输出：<br>0 2 2 2</p>
<p>再例如，输入：<br>773535<br>则程序应该输出：<br>1 1 267 838</p>
<p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 3000ms</p>
<p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p>
<p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。</p>
<p>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。</p>
<p>提交时，注意选择所期望的编译器类型。</p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>这题我是用暴力输出的，用四个循环，我先前用四个循环是从小加到大，但是超时了。我发现，输入的数越大，输出的前两个数是比较小的，但是后面两个数比较大，于是我把后面两个循环变成从大减到小，于是成功了╮(￣▽￣)╭</p>
<h2 id="实现代码（用C语言实现）"><a href="#实现代码（用C语言实现）" class="headerlink" title="实现代码（用C语言实现）"></a>实现代码（用C语言实现）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (a[<span class="number">0</span>]=<span class="number">0</span>; a[<span class="number">0</span>]&lt;<span class="built_in">sqrt</span>(n); a[<span class="number">0</span>]++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (a[<span class="number">1</span>]=a[<span class="number">0</span>];a[<span class="number">1</span>]&lt;<span class="built_in">sqrt</span>(n) ; a[<span class="number">1</span>]++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (a[<span class="number">2</span>]=<span class="built_in">sqrt</span>(n-a[<span class="number">1</span>]*a[<span class="number">1</span>]-a[<span class="number">0</span>]*a[<span class="number">0</span>]); a[<span class="number">2</span>]&gt;=a[<span class="number">1</span>]; a[<span class="number">2</span>]--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (a[<span class="number">3</span>]=<span class="built_in">sqrt</span>(n-a[<span class="number">1</span>]*a[<span class="number">1</span>]-a[<span class="number">2</span>]*a[<span class="number">2</span>]-a[<span class="number">0</span>]*a[<span class="number">0</span>])+<span class="number">1</span>; a[<span class="number">3</span>]&gt;=a[<span class="number">2</span>]; a[<span class="number">3</span>]--) &#123;<span class="comment">//其实这里加1不加1都一样</span></span><br><span class="line">                    <span class="keyword">if</span> (a[<span class="number">0</span>]*a[<span class="number">0</span>]+a[<span class="number">1</span>]*a[<span class="number">1</span>]+a[<span class="number">2</span>]*a[<span class="number">2</span>]+a[<span class="number">3</span>]*a[<span class="number">3</span>]==n) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="number">2</span>],a[<span class="number">3</span>]);</span><br><span class="line">                        <span class="keyword">return</span> ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;n);</span><br><span class="line">    solve(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c-c++</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-最大子阵</title>
    <url>/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%9C%80%E5%A4%A7%E5%AD%90%E9%98%B5.html</url>
    <content><![CDATA[<hr>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。<br>　　其中，A的子矩阵指在A中行和列均连续的一块。<br>输入格式<br>　　输入的第一行包含两个整数n, m，分别表示矩阵A的行数和列数。<br>　　接下来n行，每行m个整数，表示矩阵A。<br>输出格式<br>　　输出一行，包含一个整数，表示A中最大的子矩阵中的元素和。<br>样例输入</p>
<p> 3  3<br>-1 -4  3<br> 3  4 -1<br>-5 -2  8</p>
<p>样例输出<br><code>10</code><br>样例说明<br>　　取最后一列，和为10。<br>数据规模和约定<br>　　对于50%的数据，1&lt;=n, m&lt;=50；<br>　　对于100%的数据，1&lt;=n, m&lt;=500，A中每个元素的绝对值不超过5000。
　　</p>
<a id="more"></a>

<hr>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这题我是用动态规划求解，如下图，假设最大子矩阵的结果为从第r行到k行、从第i列到j列的子矩阵，如下所示(ari表示a[r][i],假设数组下标从1开始)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| a11 …… a1i ……a1j ……a1n |</span><br><span class="line">| a21 …… a2i ……a2j ……a2n |</span><br><span class="line">|  ......................|</span><br><span class="line">| ...................... |</span><br><span class="line">| ar1 …… ari ……arj ……arn |</span><br><span class="line">|  ......................|</span><br><span class="line">| ...................... |</span><br><span class="line">| ak1 …… aki ……akj ……akn |</span><br><span class="line">|  ......................|</span><br><span class="line">| an1 …… ani ……anj ……ann |</span><br></pre></td></tr></table></figure>
<p> 那么我们将从第r行到第k行的每一行中相同列的加起来，可以得到一个一维数组如下：<br> <code>(ar1+……+ak1, ar2+……+ak2, ……,arn+……+akn)</code>，那么从中我们就可以把一个<strong><em>求子矩阵</em></strong> 的问题转换成一个求<strong><em>最大子段和</em></strong> 的问题，从中求出解。那么问题又来了，什么是最大子段和？怎么求最大子段和？<br> 首先，我们看一个问题：</p>
<p> <code>给定n个整数（可能为负数）组成的序列a[1],a[2],a[3],…,a[n],求该序列如a[i]+a[i+1]+…+a[j]的子段和的最大值</code><br> 比如当（a1,a2,a3,a4,a4,a6）=(-1,11,-1,13,-5,-2)时，最大子段和就为23。</p>
<p> <strong><em>用动态算法求解:</em></strong><br><code>b[j]=max{a[i]+a[j]},1&lt;=i&lt;=j</code>,且<code>1&lt;=j&lt;=n</code>,则所求的最大子段和为<strong>max b[j]，1&lt;=j&lt;=n。</strong><br>由b[j]的定义可易知，<code>当b[j-1]&gt;0时b[j]=b[j-1]+a[j]</code>，否则<code>b[j]=a[j]</code>。故b[j]的动态规划递归式为:<br><code>b[j]=max(b[j-1]+a[j],a[j])，1&lt;=j&lt;=n。</code></p>
<p> <strong><em>最大子段和算法</em></strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxArray</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//求最大子段和</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span>=a[<span class="number">0</span>],temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            temp+=a[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">max</span>=<span class="built_in">max</span>&gt;temp?<span class="built_in">max</span>:temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxArray</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//求最大子段和</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span>=a[<span class="number">0</span>],temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            temp+=a[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">max</span>=<span class="built_in">max</span>&gt;temp?<span class="built_in">max</span>:temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> a[n][m];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=a[<span class="number">0</span>][<span class="number">0</span>],tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));<span class="comment">//将dp数组置为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k) &#123;</span><br><span class="line">                dp[k] += a[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = getMaxArray(dp, n);</span><br><span class="line">            res = res &gt; tmp ? res : tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c-c++</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-生日蜡烛</title>
    <url>/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%94%9F%E6%97%A5%E8%9C%A1%E7%83%9B.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>生日蜡烛</p>
<p>某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。</p>
<p>现在算起来，他一共吹熄了236根蜡烛。</p>
<p>请问，他从多少岁开始过生日party的？</p>
<p>请填写他开始过生日party的年龄数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这题比较容易，方法是用两个for循环实现，第一个循环从i=1开始，第二个循环可以从j=i开始，内存循环sum+=j;而如果sum不等于236的话，在外层循环中将sum置为0就可以了</p>
<h2 id="实现代码-c语言"><a href="#实现代码-c语言" class="headerlink" title="实现代码(c语言)"></a>实现代码(c语言)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,sum = <span class="number">0</span>,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">100</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">            sum+=j;</span><br><span class="line">            <span class="keyword">if</span> (sum==<span class="number">236</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>c-c++</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 webstrom sass 注释中文出错问题</title>
    <url>/%E8%A7%A3%E5%86%B3-webstrom-sass-%E6%B3%A8%E9%87%8A%E4%B8%AD%E6%96%87%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>最近用 webStrom 写 sass，感觉非常好用，自动帮你编译好，但是有一个问题，就是在写中文注释的时候，就会出错</p>
</blockquote>
<a id="more"></a>

<p>如下：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-95a3cfb869f7aa79.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>网上查了一下，说在 scss 文件头部加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@charset &quot;utf-8&quot;;</span><br></pre></td></tr></table></figure>

<p>但是，我试了一下并不管用！！😂</p>
<p>经过一番查找终于找到方法，在这里记录一下：</p>
<p>① 在 scss 文件的头部加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@charset &quot;utf-8&quot;;</span><br></pre></td></tr></table></figure>

<p>② 打开<code>/Library/Ruby/Gems/2.0.0/gems/sass-3.4.22/lib/sass/engine.rb</code>(mac)</p>
<p>在 require 后面加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Encoding.default_external &#x3D; Encoding.find(&#39;utf-8&#39;)</span><br></pre></td></tr></table></figure>

<p>如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-26193cd4cb4b4746.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>现在就可以支持中文注释了😀</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 webstrom 上的 babel 编译问题</title>
    <url>/%E8%A7%A3%E5%86%B3-webstrom-%E4%B8%8A%E7%9A%84-babel-%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>近日，在写 ejs 文件时，我发现用 vscode 没有啥提示，因此换成 webStrom ，但是用 webStrom 将 es6 编译成 es5 的时候出现了一些问题😭，经过一番搜索， 最后终于成功解决，这里记录一下🖊</p>
</blockquote>
<a id="more"></a>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p>首先建立一个新的工程，点击<strong>设置</strong></p>
</li>
<li><p>在设置里面，把JavaScript language version改成<strong>ECMAScript 6</strong><br><img src="http://upload-images.jianshu.io/upload_images/5308475-384e088e614a106c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>然后在js文件里写一段ES6代码</p>
</li>
<li><p>现在IDE会出现一个<code>File watcher</code>提示条</p>
</li>
<li><p>此时先别点Add watcher！</p>
</li>
<li><p>在终端切换到项目的路径，输入以下命令</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y &#x2F;&#x2F;package.json</span><br></pre></td></tr></table></figure>

<ul>
<li>安装babel-cli</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>

<ul>
<li><p>现在可以去点Add watcher，点完之后会弹出一个框</p>
</li>
<li><p>下面第三行，<code>Program</code> 那一项，填</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ProjectFileDir$&#x2F;node_modules&#x2F;.bin&#x2F;babel</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后点OK，这个时候你就会发现左边多出来一个新文件</p>
</li>
<li><p>但是现在还没搞定！现在只是搞定了自动转换的功能，系统默认把ES6 编译成了ES6…</p>
</li>
<li><p>打开终端，输入：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure>

<ul>
<li><p>再次打开设置，在搜索框输入<code>file watchers</code>，点击<code>babel</code></p>
</li>
<li><p>在 Arguments 里面将 <code>env</code> 改为  <code>=es2015</code>,点击ok<br><img src="http://upload-images.jianshu.io/upload_images/5308475-cd5fda1fb471aa6b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>在根目录下新建一个<code>.babelrc</code>文件（就是babel在当前项目的配置文件），写上：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;es2015&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>完成😁</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Charles乱码问题</title>
    <url>/%E8%A7%A3%E5%86%B3Charles%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>在网上查了半天说在Info.plist文件加字符串就好了，其实没有用，下面有一个方法亲试可以解决乱码问题</p>
</blockquote>
<a id="more"></a>

<h2 id="安装ssl证书"><a href="#安装ssl证书" class="headerlink" title="安装ssl证书"></a>安装ssl证书</h2><p><strong>3.10版本之前的</strong>需要去<a href="http://www.charlesproxy.com/ssl.zip" target="_blank" rel="noopener">http://www.charlesproxy.com/ssl.zip</a> 下载 CA 证书文件，然后双击 .crt 文件，选择‘总是信任’按钮，在钥匙串访问中即可看到添加成功的证书。 </p>
<p><strong>我是4.02版本的，在3.10版本之后的</strong>，操作如下：</p>
<ul>
<li><p>先点<strong>proxy</strong>中的<strong>macOS Proxy</strong> ，如果点击网页，Charles没有出现东西的话，<strong>把翻墙软件关了</strong><br><img src="http://upload-images.jianshu.io/upload_images/5308475-a54d663becbba0de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>然后点击<strong>help</strong>中的<strong>SSL Proxying</strong>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-23376f5b87f5cebc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>点击之后在搜索框中输入Charles，出现（我是已经改好了，原来的话是红色的）：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-61b1c3be4d7b83d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>双击那个证书，改成如下图所示，然后保存：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-c6844a5e46784c51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>接下来点击<strong>proxy</strong>中的<strong>SSL Proxying  Settings</strong>，出现如下图所示，然后点<strong>add</strong> 在Host里填 * 号 ，在Port里填443，然后点ok：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-a79e27352086fa0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5308475-4ee2987c2d59d79d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ul>
<ul>
<li>接下来，你会惊奇的发现，乱码没有了\（￣︶￣）/</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>解决安装electron卡在node install.js 不动问题</title>
    <url>/%E8%A7%A3%E5%86%B3%E5%AE%89%E8%A3%85electron%E5%8D%A1%E5%9C%A8node-install-js-%E4%B8%8D%E5%8A%A8%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>在安装electron的时候，一直卡在node install.js不动😭，翻了墙也不行，于是在 github 上搜索终于找到解决方法，为此记录下来📝</p>
</blockquote>
<a id="more"></a>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>install.js</code>,里面的下载是依赖于<code>electron-download</code>这个模块<br><img src="http://upload-images.jianshu.io/upload_images/5308475-6a5758873a75a2c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>搜索<a href="https://github.com/electron-userland/electron-download" target="_blank" rel="noopener">electron-download</a>发现：👇</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5308475-0b73ee9483927679.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>打开终端，输入<code>vi ~/.npmrc</code>,在里面添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">electron_mirror&#x3D;&quot;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;electron&#x2F;&quot;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/5308475-433a4c62d776c545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>再试一次<code>npm install electron -g</code>,这次就成功了😄</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>解决inline-block元素的bug</title>
    <url>/%E8%A7%A3%E5%86%B3inline-block%E5%85%83%E7%B4%A0%E7%9A%84bug.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>在使用inline-block时，有时候出现的效果莫名奇妙，例如：</p>
<ul>
<li>两个inline-block 元素之间如果有空格、回车、tab，那么在页面上就有一个空隙</li>
<li>两个不同高度的 inline-block 元素顶部无法对齐，或者使用inline-block下面无缘无故多出几像素</li>
</ul>
</blockquote>
<a id="more"></a>

<h2 id="例子1-出现空隙"><a href="#例子1-出现空隙" class="headerlink" title="例子1,出现空隙"></a>例子1,出现空隙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p><img src="http://upload-images.jianshu.io/upload_images/5308475-efbd5e22bb492464.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>1.去掉空格</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2. 添加父元素，将父元素的 font-size 设置为0，然后在 inline-block 元素中将 font-size 设置为 14px</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .parent&#123;</span><br><span class="line">      font-size:0;</span><br><span class="line">    &#125;</span><br><span class="line">    .child&#123;</span><br><span class="line">      font-size:14px;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3. 使用<code>margin-right</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .child&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">      margin-right:-5px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>4. 添加父元素，使用letter-spacing（该属性增加或减少字符间的空白（字符间距））</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .parent&#123;</span><br><span class="line">      letter-spacing:-5px;</span><br><span class="line">    &#125;</span><br><span class="line">    .child&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>5. 使用word-spacing （该属性增加或减少单词间的空白（即字间隔））</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .parent&#123;</span><br><span class="line">      word-spacing:-5px;</span><br><span class="line">    &#125;</span><br><span class="line">    .child&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="解决效果："><a href="#解决效果：" class="headerlink" title="解决效果："></a>解决效果：</h3><p><img src="http://upload-images.jianshu.io/upload_images/5308475-e11f863d7e7beccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="例子2，设置inline-block-后，莫名其妙出现一些空白"><a href="#例子2，设置inline-block-后，莫名其妙出现一些空白" class="headerlink" title="例子2，设置inline-block 后，莫名其妙出现一些空白"></a>例子2，设置inline-block 后，莫名其妙出现一些空白</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;span设为inline-block之后下面的空白&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">      border:solid 1px rgb(202, 43, 43);</span><br><span class="line">      width:250px;</span><br><span class="line">    &#125;</span><br><span class="line">    span&#123;</span><br><span class="line">      display:inline-block;</span><br><span class="line">      width:200px;</span><br><span class="line">      height:200px;</span><br><span class="line">      background-color:rgb(109, 195, 252);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://upload-images.jianshu.io/upload_images/5308475-733a6cd2882f1d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>使用vertical-align</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;span设为inline-block之后下面的空白&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">      border:solid 1px rgb(202, 43, 43);</span><br><span class="line">      width:250px;</span><br><span class="line">    &#125;</span><br><span class="line">    span&#123;</span><br><span class="line">      display:inline-block;</span><br><span class="line">      width:200px;</span><br><span class="line">      height:200px;</span><br><span class="line">      background-color:rgb(109, 195, 252);</span><br><span class="line">      vertical-align:top;&#x2F;&#x2F;新增</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="解决效果"><a href="#解决效果" class="headerlink" title="解决效果"></a>解决效果</h3><p><img src="http://upload-images.jianshu.io/upload_images/5308475-74787680d7bfab18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="例子3，两个不同高度的-inline-block-元素顶部无法对齐"><a href="#例子3，两个不同高度的-inline-block-元素顶部无法对齐" class="headerlink" title="例子3，两个不同高度的 inline-block 元素顶部无法对齐"></a>例子3，两个不同高度的 inline-block 元素顶部无法对齐</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    </span><br><span class="line">    .child1&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      </span><br><span class="line">      background-color: rgb(109, 195, 252);</span><br><span class="line">    &#125;</span><br><span class="line">    .child2&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 120px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;div class&#x3D;&quot;child1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="http://upload-images.jianshu.io/upload_images/5308475-3974cddc92207720.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>还是使用vertical-align</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    </span><br><span class="line">    .child1&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      vertical-align:top;&#x2F;&#x2F;新增</span><br><span class="line">      background-color: rgb(109, 195, 252);</span><br><span class="line">    &#125;</span><br><span class="line">    .child2&#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width:100px;</span><br><span class="line">      height: 120px;</span><br><span class="line">      background-color: rgb(233, 148, 148);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;div class&#x3D;&quot;child1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>


<h3 id="解决效果-1"><a href="#解决效果-1" class="headerlink" title="解决效果"></a>解决效果</h3><p><img src="http://upload-images.jianshu.io/upload_images/5308475-330207fc3fb88ea6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
